//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CCEJobs {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AtefDataSet13")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AtefDataSet13 : global::System.Data.DataSet {
        
        private tblJobCostCodePhaseDataTable tabletblJobCostCodePhase;
        
        private DataTable1DataTable tableDataTable1;
        
        private global::System.Data.DataRelation relationPhase_Detail;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AtefDataSet13() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AtefDataSet13(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblJobCostCodePhase"] != null)) {
                    base.Tables.Add(new tblJobCostCodePhaseDataTable(ds.Tables["tblJobCostCodePhase"]));
                }
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblJobCostCodePhaseDataTable tblJobCostCodePhase {
            get {
                return this.tabletblJobCostCodePhase;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable1DataTable DataTable1 {
            get {
                return this.tableDataTable1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AtefDataSet13 cln = ((AtefDataSet13)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tblJobCostCodePhase"] != null)) {
                    base.Tables.Add(new tblJobCostCodePhaseDataTable(ds.Tables["tblJobCostCodePhase"]));
                }
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletblJobCostCodePhase = ((tblJobCostCodePhaseDataTable)(base.Tables["tblJobCostCodePhase"]));
            if ((initTable == true)) {
                if ((this.tabletblJobCostCodePhase != null)) {
                    this.tabletblJobCostCodePhase.InitVars();
                }
            }
            this.tableDataTable1 = ((DataTable1DataTable)(base.Tables["DataTable1"]));
            if ((initTable == true)) {
                if ((this.tableDataTable1 != null)) {
                    this.tableDataTable1.InitVars();
                }
            }
            this.relationPhase_Detail = this.Relations["Phase Detail"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AtefDataSet13";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AtefDataSet13.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletblJobCostCodePhase = new tblJobCostCodePhaseDataTable();
            base.Tables.Add(this.tabletblJobCostCodePhase);
            this.tableDataTable1 = new DataTable1DataTable();
            base.Tables.Add(this.tableDataTable1);
            this.relationPhase_Detail = new global::System.Data.DataRelation("Phase Detail", new global::System.Data.DataColumn[] {
                        this.tabletblJobCostCodePhase.JobCostCodePhaseIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableDataTable1.JobCostCodePhaseIDColumn}, false);
            this.Relations.Add(this.relationPhase_Detail);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblJobCostCodePhase() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AtefDataSet13 ds = new AtefDataSet13();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tblJobCostCodePhaseRowChangeEventHandler(object sender, tblJobCostCodePhaseRowChangeEvent e);
        
        public delegate void DataTable1RowChangeEventHandler(object sender, DataTable1RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblJobCostCodePhaseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnJobCostCodePhaseID;
            
            private global::System.Data.DataColumn columnJobID;
            
            private global::System.Data.DataColumn columnJobCostCodeType;
            
            private global::System.Data.DataColumn columnJobCostCodePhase;
            
            private global::System.Data.DataColumn columnCostCode;
            
            private global::System.Data.DataColumn columnCostCodeTitle;
            
            private global::System.Data.DataColumn columnCostCodeDescription;
            
            private global::System.Data.DataColumn columnUserDescription;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnOriginalContractHours;
            
            private global::System.Data.DataColumn columnOriginalContractQuantity;
            
            private global::System.Data.DataColumn columnOriginalContractCost;
            
            private global::System.Data.DataColumn columnApprovedChangeOrderHours;
            
            private global::System.Data.DataColumn columnApprovedChangeOrderQuantity;
            
            private global::System.Data.DataColumn columnApprovedChangeOrderCost;
            
            private global::System.Data.DataColumn columnPendingWithProceedHours;
            
            private global::System.Data.DataColumn columnPendingWithProceedQuantity;
            
            private global::System.Data.DataColumn columnPendingWithProceedCost;
            
            private global::System.Data.DataColumn columnPendingNoProceedHours;
            
            private global::System.Data.DataColumn columnPendingNoProceedQuantity;
            
            private global::System.Data.DataColumn columnPendingNoProceedCost;
            
            private global::System.Data.DataColumn columnQuantityAdjustment;
            
            private global::System.Data.DataColumn columnTotalBudgetHours;
            
            private global::System.Data.DataColumn columnTotalBudgetQuantity;
            
            private global::System.Data.DataColumn columnTotalBudgetCost;
            
            private global::System.Data.DataColumn columnCommittedHours;
            
            private global::System.Data.DataColumn columnCommittedQuantity;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnOpenCommitment;
            
            private global::System.Data.DataColumn columnUsedHoursPercentage;
            
            private global::System.Data.DataColumn columnUsedQuantityPercentage;
            
            private global::System.Data.DataColumn columnEstimatedPerformanceFactor;
            
            private global::System.Data.DataColumn columnDifferentialHours;
            
            private global::System.Data.DataColumn columnCurrentPerformanceHours;
            
            private global::System.Data.DataColumn columnProjectedTotalHours;
            
            private global::System.Data.DataColumn columnProjectedCAC;
            
            private global::System.Data.DataColumn columnRevisedCACMonthend;
            
            private global::System.Data.DataColumn columnProjectedOverUnder;
            
            private global::System.Data.DataColumn columnValueAdjustment;
            
            private global::System.Data.DataColumn columnValueAdjustmentPercentage;
            
            private global::System.Data.DataColumn columnRevisedCAC;
            
            private global::System.Data.DataColumn columnRevisedOverUnder;
            
            private global::System.Data.DataColumn columnRevisedPerformanceFactor;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnMonthendCAC;
            
            private global::System.Data.DataColumn columnMonthendValueAdjustment;
            
            private global::System.Data.DataColumn columnActualCostPlusCommitment;
            
            private global::System.Data.DataColumn columnUpdateMonthendValueAdjustment;
            
            private global::System.Data.DataColumn columnBudgetLaborUnit;
            
            private global::System.Data.DataColumn columnActualLaborUnit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobCostCodePhaseDataTable() {
                this.TableName = "tblJobCostCodePhase";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblJobCostCodePhaseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblJobCostCodePhaseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobCostCodePhaseIDColumn {
                get {
                    return this.columnJobCostCodePhaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobIDColumn {
                get {
                    return this.columnJobID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobCostCodeTypeColumn {
                get {
                    return this.columnJobCostCodeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobCostCodePhaseColumn {
                get {
                    return this.columnJobCostCodePhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCodeColumn {
                get {
                    return this.columnCostCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCodeTitleColumn {
                get {
                    return this.columnCostCodeTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCodeDescriptionColumn {
                get {
                    return this.columnCostCodeDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserDescriptionColumn {
                get {
                    return this.columnUserDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalContractHoursColumn {
                get {
                    return this.columnOriginalContractHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalContractQuantityColumn {
                get {
                    return this.columnOriginalContractQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalContractCostColumn {
                get {
                    return this.columnOriginalContractCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedChangeOrderHoursColumn {
                get {
                    return this.columnApprovedChangeOrderHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedChangeOrderQuantityColumn {
                get {
                    return this.columnApprovedChangeOrderQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedChangeOrderCostColumn {
                get {
                    return this.columnApprovedChangeOrderCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PendingWithProceedHoursColumn {
                get {
                    return this.columnPendingWithProceedHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PendingWithProceedQuantityColumn {
                get {
                    return this.columnPendingWithProceedQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PendingWithProceedCostColumn {
                get {
                    return this.columnPendingWithProceedCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PendingNoProceedHoursColumn {
                get {
                    return this.columnPendingNoProceedHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PendingNoProceedQuantityColumn {
                get {
                    return this.columnPendingNoProceedQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PendingNoProceedCostColumn {
                get {
                    return this.columnPendingNoProceedCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityAdjustmentColumn {
                get {
                    return this.columnQuantityAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalBudgetHoursColumn {
                get {
                    return this.columnTotalBudgetHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalBudgetQuantityColumn {
                get {
                    return this.columnTotalBudgetQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalBudgetCostColumn {
                get {
                    return this.columnTotalBudgetCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommittedHoursColumn {
                get {
                    return this.columnCommittedHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommittedQuantityColumn {
                get {
                    return this.columnCommittedQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpenCommitmentColumn {
                get {
                    return this.columnOpenCommitment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsedHoursPercentageColumn {
                get {
                    return this.columnUsedHoursPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsedQuantityPercentageColumn {
                get {
                    return this.columnUsedQuantityPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstimatedPerformanceFactorColumn {
                get {
                    return this.columnEstimatedPerformanceFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DifferentialHoursColumn {
                get {
                    return this.columnDifferentialHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentPerformanceHoursColumn {
                get {
                    return this.columnCurrentPerformanceHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectedTotalHoursColumn {
                get {
                    return this.columnProjectedTotalHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectedCACColumn {
                get {
                    return this.columnProjectedCAC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevisedCACMonthendColumn {
                get {
                    return this.columnRevisedCACMonthend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectedOverUnderColumn {
                get {
                    return this.columnProjectedOverUnder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueAdjustmentColumn {
                get {
                    return this.columnValueAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueAdjustmentPercentageColumn {
                get {
                    return this.columnValueAdjustmentPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevisedCACColumn {
                get {
                    return this.columnRevisedCAC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevisedOverUnderColumn {
                get {
                    return this.columnRevisedOverUnder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevisedPerformanceFactorColumn {
                get {
                    return this.columnRevisedPerformanceFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthendCACColumn {
                get {
                    return this.columnMonthendCAC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthendValueAdjustmentColumn {
                get {
                    return this.columnMonthendValueAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualCostPlusCommitmentColumn {
                get {
                    return this.columnActualCostPlusCommitment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateMonthendValueAdjustmentColumn {
                get {
                    return this.columnUpdateMonthendValueAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetLaborUnitColumn {
                get {
                    return this.columnBudgetLaborUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualLaborUnitColumn {
                get {
                    return this.columnActualLaborUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobCostCodePhaseRow this[int index] {
                get {
                    return ((tblJobCostCodePhaseRow)(this.Rows[index]));
                }
            }
            
            public event tblJobCostCodePhaseRowChangeEventHandler tblJobCostCodePhaseRowChanging;
            
            public event tblJobCostCodePhaseRowChangeEventHandler tblJobCostCodePhaseRowChanged;
            
            public event tblJobCostCodePhaseRowChangeEventHandler tblJobCostCodePhaseRowDeleting;
            
            public event tblJobCostCodePhaseRowChangeEventHandler tblJobCostCodePhaseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblJobCostCodePhaseRow(tblJobCostCodePhaseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobCostCodePhaseRow AddtblJobCostCodePhaseRow(
                        int JobID, 
                        string JobCostCodeType, 
                        string JobCostCodePhase, 
                        string CostCode, 
                        string CostCodeTitle, 
                        string CostCodeDescription, 
                        string UserDescription, 
                        string Unit, 
                        int OriginalContractHours, 
                        int OriginalContractQuantity, 
                        double OriginalContractCost, 
                        int ApprovedChangeOrderHours, 
                        int ApprovedChangeOrderQuantity, 
                        double ApprovedChangeOrderCost, 
                        int PendingWithProceedHours, 
                        int PendingWithProceedQuantity, 
                        double PendingWithProceedCost, 
                        int PendingNoProceedHours, 
                        int PendingNoProceedQuantity, 
                        double PendingNoProceedCost, 
                        int QuantityAdjustment, 
                        int TotalBudgetHours, 
                        int TotalBudgetQuantity, 
                        double TotalBudgetCost, 
                        int CommittedHours, 
                        int CommittedQuantity, 
                        double Cost, 
                        double OpenCommitment, 
                        double UsedHoursPercentage, 
                        double UsedQuantityPercentage, 
                        double EstimatedPerformanceFactor, 
                        double DifferentialHours, 
                        double CurrentPerformanceHours, 
                        double ProjectedTotalHours, 
                        double ProjectedCAC, 
                        double RevisedCACMonthend, 
                        double ProjectedOverUnder, 
                        double ValueAdjustment, 
                        double ValueAdjustmentPercentage, 
                        double RevisedCAC, 
                        double RevisedOverUnder, 
                        double RevisedPerformanceFactor, 
                        bool Selected, 
                        double MonthendCAC, 
                        double MonthendValueAdjustment, 
                        double ActualCostPlusCommitment, 
                        bool UpdateMonthendValueAdjustment, 
                        double BudgetLaborUnit, 
                        double ActualLaborUnit) {
                tblJobCostCodePhaseRow rowtblJobCostCodePhaseRow = ((tblJobCostCodePhaseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        JobID,
                        JobCostCodeType,
                        JobCostCodePhase,
                        CostCode,
                        CostCodeTitle,
                        CostCodeDescription,
                        UserDescription,
                        Unit,
                        OriginalContractHours,
                        OriginalContractQuantity,
                        OriginalContractCost,
                        ApprovedChangeOrderHours,
                        ApprovedChangeOrderQuantity,
                        ApprovedChangeOrderCost,
                        PendingWithProceedHours,
                        PendingWithProceedQuantity,
                        PendingWithProceedCost,
                        PendingNoProceedHours,
                        PendingNoProceedQuantity,
                        PendingNoProceedCost,
                        QuantityAdjustment,
                        TotalBudgetHours,
                        TotalBudgetQuantity,
                        TotalBudgetCost,
                        CommittedHours,
                        CommittedQuantity,
                        Cost,
                        OpenCommitment,
                        UsedHoursPercentage,
                        UsedQuantityPercentage,
                        EstimatedPerformanceFactor,
                        DifferentialHours,
                        CurrentPerformanceHours,
                        ProjectedTotalHours,
                        ProjectedCAC,
                        RevisedCACMonthend,
                        ProjectedOverUnder,
                        ValueAdjustment,
                        ValueAdjustmentPercentage,
                        RevisedCAC,
                        RevisedOverUnder,
                        RevisedPerformanceFactor,
                        Selected,
                        MonthendCAC,
                        MonthendValueAdjustment,
                        ActualCostPlusCommitment,
                        UpdateMonthendValueAdjustment,
                        BudgetLaborUnit,
                        ActualLaborUnit};
                rowtblJobCostCodePhaseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblJobCostCodePhaseRow);
                return rowtblJobCostCodePhaseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobCostCodePhaseRow FindByJobCostCodePhaseID(int JobCostCodePhaseID) {
                return ((tblJobCostCodePhaseRow)(this.Rows.Find(new object[] {
                            JobCostCodePhaseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblJobCostCodePhaseDataTable cln = ((tblJobCostCodePhaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblJobCostCodePhaseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnJobCostCodePhaseID = base.Columns["JobCostCodePhaseID"];
                this.columnJobID = base.Columns["JobID"];
                this.columnJobCostCodeType = base.Columns["JobCostCodeType"];
                this.columnJobCostCodePhase = base.Columns["JobCostCodePhase"];
                this.columnCostCode = base.Columns["CostCode"];
                this.columnCostCodeTitle = base.Columns["CostCodeTitle"];
                this.columnCostCodeDescription = base.Columns["CostCodeDescription"];
                this.columnUserDescription = base.Columns["UserDescription"];
                this.columnUnit = base.Columns["Unit"];
                this.columnOriginalContractHours = base.Columns["OriginalContractHours"];
                this.columnOriginalContractQuantity = base.Columns["OriginalContractQuantity"];
                this.columnOriginalContractCost = base.Columns["OriginalContractCost"];
                this.columnApprovedChangeOrderHours = base.Columns["ApprovedChangeOrderHours"];
                this.columnApprovedChangeOrderQuantity = base.Columns["ApprovedChangeOrderQuantity"];
                this.columnApprovedChangeOrderCost = base.Columns["ApprovedChangeOrderCost"];
                this.columnPendingWithProceedHours = base.Columns["PendingWithProceedHours"];
                this.columnPendingWithProceedQuantity = base.Columns["PendingWithProceedQuantity"];
                this.columnPendingWithProceedCost = base.Columns["PendingWithProceedCost"];
                this.columnPendingNoProceedHours = base.Columns["PendingNoProceedHours"];
                this.columnPendingNoProceedQuantity = base.Columns["PendingNoProceedQuantity"];
                this.columnPendingNoProceedCost = base.Columns["PendingNoProceedCost"];
                this.columnQuantityAdjustment = base.Columns["QuantityAdjustment"];
                this.columnTotalBudgetHours = base.Columns["TotalBudgetHours"];
                this.columnTotalBudgetQuantity = base.Columns["TotalBudgetQuantity"];
                this.columnTotalBudgetCost = base.Columns["TotalBudgetCost"];
                this.columnCommittedHours = base.Columns["CommittedHours"];
                this.columnCommittedQuantity = base.Columns["CommittedQuantity"];
                this.columnCost = base.Columns["Cost"];
                this.columnOpenCommitment = base.Columns["OpenCommitment"];
                this.columnUsedHoursPercentage = base.Columns["UsedHoursPercentage"];
                this.columnUsedQuantityPercentage = base.Columns["UsedQuantityPercentage"];
                this.columnEstimatedPerformanceFactor = base.Columns["EstimatedPerformanceFactor"];
                this.columnDifferentialHours = base.Columns["DifferentialHours"];
                this.columnCurrentPerformanceHours = base.Columns["CurrentPerformanceHours"];
                this.columnProjectedTotalHours = base.Columns["ProjectedTotalHours"];
                this.columnProjectedCAC = base.Columns["ProjectedCAC"];
                this.columnRevisedCACMonthend = base.Columns["RevisedCACMonthend"];
                this.columnProjectedOverUnder = base.Columns["ProjectedOverUnder"];
                this.columnValueAdjustment = base.Columns["ValueAdjustment"];
                this.columnValueAdjustmentPercentage = base.Columns["ValueAdjustmentPercentage"];
                this.columnRevisedCAC = base.Columns["RevisedCAC"];
                this.columnRevisedOverUnder = base.Columns["RevisedOverUnder"];
                this.columnRevisedPerformanceFactor = base.Columns["RevisedPerformanceFactor"];
                this.columnSelected = base.Columns["Selected"];
                this.columnMonthendCAC = base.Columns["MonthendCAC"];
                this.columnMonthendValueAdjustment = base.Columns["MonthendValueAdjustment"];
                this.columnActualCostPlusCommitment = base.Columns["ActualCostPlusCommitment"];
                this.columnUpdateMonthendValueAdjustment = base.Columns["UpdateMonthendValueAdjustment"];
                this.columnBudgetLaborUnit = base.Columns["BudgetLaborUnit"];
                this.columnActualLaborUnit = base.Columns["ActualLaborUnit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnJobCostCodePhaseID = new global::System.Data.DataColumn("JobCostCodePhaseID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobCostCodePhaseID);
                this.columnJobID = new global::System.Data.DataColumn("JobID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobID);
                this.columnJobCostCodeType = new global::System.Data.DataColumn("JobCostCodeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobCostCodeType);
                this.columnJobCostCodePhase = new global::System.Data.DataColumn("JobCostCodePhase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobCostCodePhase);
                this.columnCostCode = new global::System.Data.DataColumn("CostCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCode);
                this.columnCostCodeTitle = new global::System.Data.DataColumn("CostCodeTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCodeTitle);
                this.columnCostCodeDescription = new global::System.Data.DataColumn("CostCodeDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCodeDescription);
                this.columnUserDescription = new global::System.Data.DataColumn("UserDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserDescription);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnOriginalContractHours = new global::System.Data.DataColumn("OriginalContractHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalContractHours);
                this.columnOriginalContractQuantity = new global::System.Data.DataColumn("OriginalContractQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalContractQuantity);
                this.columnOriginalContractCost = new global::System.Data.DataColumn("OriginalContractCost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalContractCost);
                this.columnApprovedChangeOrderHours = new global::System.Data.DataColumn("ApprovedChangeOrderHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedChangeOrderHours);
                this.columnApprovedChangeOrderQuantity = new global::System.Data.DataColumn("ApprovedChangeOrderQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedChangeOrderQuantity);
                this.columnApprovedChangeOrderCost = new global::System.Data.DataColumn("ApprovedChangeOrderCost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedChangeOrderCost);
                this.columnPendingWithProceedHours = new global::System.Data.DataColumn("PendingWithProceedHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPendingWithProceedHours);
                this.columnPendingWithProceedQuantity = new global::System.Data.DataColumn("PendingWithProceedQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPendingWithProceedQuantity);
                this.columnPendingWithProceedCost = new global::System.Data.DataColumn("PendingWithProceedCost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPendingWithProceedCost);
                this.columnPendingNoProceedHours = new global::System.Data.DataColumn("PendingNoProceedHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPendingNoProceedHours);
                this.columnPendingNoProceedQuantity = new global::System.Data.DataColumn("PendingNoProceedQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPendingNoProceedQuantity);
                this.columnPendingNoProceedCost = new global::System.Data.DataColumn("PendingNoProceedCost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPendingNoProceedCost);
                this.columnQuantityAdjustment = new global::System.Data.DataColumn("QuantityAdjustment", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityAdjustment);
                this.columnTotalBudgetHours = new global::System.Data.DataColumn("TotalBudgetHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalBudgetHours);
                this.columnTotalBudgetQuantity = new global::System.Data.DataColumn("TotalBudgetQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalBudgetQuantity);
                this.columnTotalBudgetCost = new global::System.Data.DataColumn("TotalBudgetCost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalBudgetCost);
                this.columnCommittedHours = new global::System.Data.DataColumn("CommittedHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommittedHours);
                this.columnCommittedQuantity = new global::System.Data.DataColumn("CommittedQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommittedQuantity);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnOpenCommitment = new global::System.Data.DataColumn("OpenCommitment", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpenCommitment);
                this.columnUsedHoursPercentage = new global::System.Data.DataColumn("UsedHoursPercentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsedHoursPercentage);
                this.columnUsedQuantityPercentage = new global::System.Data.DataColumn("UsedQuantityPercentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsedQuantityPercentage);
                this.columnEstimatedPerformanceFactor = new global::System.Data.DataColumn("EstimatedPerformanceFactor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstimatedPerformanceFactor);
                this.columnDifferentialHours = new global::System.Data.DataColumn("DifferentialHours", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDifferentialHours);
                this.columnCurrentPerformanceHours = new global::System.Data.DataColumn("CurrentPerformanceHours", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentPerformanceHours);
                this.columnProjectedTotalHours = new global::System.Data.DataColumn("ProjectedTotalHours", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectedTotalHours);
                this.columnProjectedCAC = new global::System.Data.DataColumn("ProjectedCAC", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectedCAC);
                this.columnRevisedCACMonthend = new global::System.Data.DataColumn("RevisedCACMonthend", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevisedCACMonthend);
                this.columnProjectedOverUnder = new global::System.Data.DataColumn("ProjectedOverUnder", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectedOverUnder);
                this.columnValueAdjustment = new global::System.Data.DataColumn("ValueAdjustment", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueAdjustment);
                this.columnValueAdjustmentPercentage = new global::System.Data.DataColumn("ValueAdjustmentPercentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueAdjustmentPercentage);
                this.columnRevisedCAC = new global::System.Data.DataColumn("RevisedCAC", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevisedCAC);
                this.columnRevisedOverUnder = new global::System.Data.DataColumn("RevisedOverUnder", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevisedOverUnder);
                this.columnRevisedPerformanceFactor = new global::System.Data.DataColumn("RevisedPerformanceFactor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevisedPerformanceFactor);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnMonthendCAC = new global::System.Data.DataColumn("MonthendCAC", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthendCAC);
                this.columnMonthendValueAdjustment = new global::System.Data.DataColumn("MonthendValueAdjustment", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthendValueAdjustment);
                this.columnActualCostPlusCommitment = new global::System.Data.DataColumn("ActualCostPlusCommitment", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualCostPlusCommitment);
                this.columnUpdateMonthendValueAdjustment = new global::System.Data.DataColumn("UpdateMonthendValueAdjustment", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateMonthendValueAdjustment);
                this.columnBudgetLaborUnit = new global::System.Data.DataColumn("BudgetLaborUnit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudgetLaborUnit);
                this.columnActualLaborUnit = new global::System.Data.DataColumn("ActualLaborUnit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualLaborUnit);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnJobCostCodePhaseID}, true));
                this.columnJobCostCodePhaseID.AutoIncrement = true;
                this.columnJobCostCodePhaseID.AllowDBNull = false;
                this.columnJobCostCodePhaseID.ReadOnly = true;
                this.columnJobCostCodePhaseID.Unique = true;
                this.columnJobCostCodeType.MaxLength = 1;
                this.columnJobCostCodePhase.MaxLength = 3;
                this.columnCostCode.MaxLength = 3;
                this.columnCostCodeTitle.MaxLength = 255;
                this.columnCostCodeDescription.MaxLength = 255;
                this.columnUserDescription.MaxLength = 255;
                this.columnUnit.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobCostCodePhaseRow NewtblJobCostCodePhaseRow() {
                return ((tblJobCostCodePhaseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblJobCostCodePhaseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblJobCostCodePhaseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblJobCostCodePhaseRowChanged != null)) {
                    this.tblJobCostCodePhaseRowChanged(this, new tblJobCostCodePhaseRowChangeEvent(((tblJobCostCodePhaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblJobCostCodePhaseRowChanging != null)) {
                    this.tblJobCostCodePhaseRowChanging(this, new tblJobCostCodePhaseRowChangeEvent(((tblJobCostCodePhaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblJobCostCodePhaseRowDeleted != null)) {
                    this.tblJobCostCodePhaseRowDeleted(this, new tblJobCostCodePhaseRowChangeEvent(((tblJobCostCodePhaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblJobCostCodePhaseRowDeleting != null)) {
                    this.tblJobCostCodePhaseRowDeleting(this, new tblJobCostCodePhaseRowChangeEvent(((tblJobCostCodePhaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblJobCostCodePhaseRow(tblJobCostCodePhaseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AtefDataSet13 ds = new AtefDataSet13();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblJobCostCodePhaseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnQuantityToDate;
            
            private global::System.Data.DataColumn columnHoursToDate;
            
            private global::System.Data.DataColumn columnEarned;
            
            private global::System.Data.DataColumn columnLaborPerformanceFactor;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnHours;
            
            private global::System.Data.DataColumn columnWeekend;
            
            private global::System.Data.DataColumn columnJobCostCodePhaseID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1DataTable() {
                this.TableName = "DataTable1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityToDateColumn {
                get {
                    return this.columnQuantityToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoursToDateColumn {
                get {
                    return this.columnHoursToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EarnedColumn {
                get {
                    return this.columnEarned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LaborPerformanceFactorColumn {
                get {
                    return this.columnLaborPerformanceFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoursColumn {
                get {
                    return this.columnHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeekendColumn {
                get {
                    return this.columnWeekend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobCostCodePhaseIDColumn {
                get {
                    return this.columnJobCostCodePhaseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row this[int index] {
                get {
                    return ((DataTable1Row)(this.Rows[index]));
                }
            }
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanging;
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanged;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleting;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable1Row(DataTable1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row AddDataTable1Row(int QuantityToDate, int HoursToDate, double Earned, double LaborPerformanceFactor, int Quantity, int Hours, System.DateTime Weekend, tblJobCostCodePhaseRow parenttblJobCostCodePhaseRowByPhase_Detail) {
                DataTable1Row rowDataTable1Row = ((DataTable1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        QuantityToDate,
                        HoursToDate,
                        Earned,
                        LaborPerformanceFactor,
                        Quantity,
                        Hours,
                        Weekend,
                        null};
                if ((parenttblJobCostCodePhaseRowByPhase_Detail != null)) {
                    columnValuesArray[7] = parenttblJobCostCodePhaseRowByPhase_Detail[0];
                }
                rowDataTable1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable1Row);
                return rowDataTable1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable1DataTable cln = ((DataTable1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnQuantityToDate = base.Columns["QuantityToDate"];
                this.columnHoursToDate = base.Columns["HoursToDate"];
                this.columnEarned = base.Columns["Earned"];
                this.columnLaborPerformanceFactor = base.Columns["LaborPerformanceFactor"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnHours = base.Columns["Hours"];
                this.columnWeekend = base.Columns["Weekend"];
                this.columnJobCostCodePhaseID = base.Columns["JobCostCodePhaseID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnQuantityToDate = new global::System.Data.DataColumn("QuantityToDate", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityToDate);
                this.columnHoursToDate = new global::System.Data.DataColumn("HoursToDate", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoursToDate);
                this.columnEarned = new global::System.Data.DataColumn("Earned", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEarned);
                this.columnLaborPerformanceFactor = new global::System.Data.DataColumn("LaborPerformanceFactor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaborPerformanceFactor);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnHours = new global::System.Data.DataColumn("Hours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnWeekend = new global::System.Data.DataColumn("Weekend", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeekend);
                this.columnJobCostCodePhaseID = new global::System.Data.DataColumn("JobCostCodePhaseID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobCostCodePhaseID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row NewDataTable1Row() {
                return ((DataTable1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable1RowChanged != null)) {
                    this.DataTable1RowChanged(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable1RowChanging != null)) {
                    this.DataTable1RowChanging(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable1RowDeleted != null)) {
                    this.DataTable1RowDeleted(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable1RowDeleting != null)) {
                    this.DataTable1RowDeleting(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable1Row(DataTable1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AtefDataSet13 ds = new AtefDataSet13();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblJobCostCodePhaseRow : global::System.Data.DataRow {
            
            private tblJobCostCodePhaseDataTable tabletblJobCostCodePhase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblJobCostCodePhaseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblJobCostCodePhase = ((tblJobCostCodePhaseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobCostCodePhaseID {
                get {
                    return ((int)(this[this.tabletblJobCostCodePhase.JobCostCodePhaseIDColumn]));
                }
                set {
                    this[this.tabletblJobCostCodePhase.JobCostCodePhaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobID {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.JobIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobID\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.JobIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobCostCodeType {
                get {
                    try {
                        return ((string)(this[this.tabletblJobCostCodePhase.JobCostCodeTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobCostCodeType\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.JobCostCodeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobCostCodePhase {
                get {
                    try {
                        return ((string)(this[this.tabletblJobCostCodePhase.JobCostCodePhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobCostCodePhase\' in table \'tblJobCostCodePhase\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.JobCostCodePhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CostCode {
                get {
                    try {
                        return ((string)(this[this.tabletblJobCostCodePhase.CostCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostCode\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.CostCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CostCodeTitle {
                get {
                    try {
                        return ((string)(this[this.tabletblJobCostCodePhase.CostCodeTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostCodeTitle\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.CostCodeTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CostCodeDescription {
                get {
                    try {
                        return ((string)(this[this.tabletblJobCostCodePhase.CostCodeDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostCodeDescription\' in table \'tblJobCostCodePhase\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.CostCodeDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserDescription {
                get {
                    try {
                        return ((string)(this[this.tabletblJobCostCodePhase.UserDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserDescription\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.UserDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tabletblJobCostCodePhase.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OriginalContractHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.OriginalContractHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalContractHours\' in table \'tblJobCostCodePhase\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.OriginalContractHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OriginalContractQuantity {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.OriginalContractQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalContractQuantity\' in table \'tblJobCostCodePhase\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.OriginalContractQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OriginalContractCost {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.OriginalContractCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalContractCost\' in table \'tblJobCostCodePhase\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.OriginalContractCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ApprovedChangeOrderHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.ApprovedChangeOrderHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedChangeOrderHours\' in table \'tblJobCostCodePhase\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.ApprovedChangeOrderHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ApprovedChangeOrderQuantity {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.ApprovedChangeOrderQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedChangeOrderQuantity\' in table \'tblJobCostCodePhase\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.ApprovedChangeOrderQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ApprovedChangeOrderCost {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.ApprovedChangeOrderCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedChangeOrderCost\' in table \'tblJobCostCodePhase\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.ApprovedChangeOrderCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PendingWithProceedHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.PendingWithProceedHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PendingWithProceedHours\' in table \'tblJobCostCodePhase\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.PendingWithProceedHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PendingWithProceedQuantity {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.PendingWithProceedQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PendingWithProceedQuantity\' in table \'tblJobCostCodePhase\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.PendingWithProceedQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PendingWithProceedCost {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.PendingWithProceedCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PendingWithProceedCost\' in table \'tblJobCostCodePhase\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.PendingWithProceedCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PendingNoProceedHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.PendingNoProceedHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PendingNoProceedHours\' in table \'tblJobCostCodePhase\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.PendingNoProceedHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PendingNoProceedQuantity {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.PendingNoProceedQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PendingNoProceedQuantity\' in table \'tblJobCostCodePhase\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.PendingNoProceedQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PendingNoProceedCost {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.PendingNoProceedCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PendingNoProceedCost\' in table \'tblJobCostCodePhase\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.PendingNoProceedCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuantityAdjustment {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.QuantityAdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QuantityAdjustment\' in table \'tblJobCostCodePhase\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.QuantityAdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalBudgetHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.TotalBudgetHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalBudgetHours\' in table \'tblJobCostCodePhase\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.TotalBudgetHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalBudgetQuantity {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.TotalBudgetQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalBudgetQuantity\' in table \'tblJobCostCodePhase\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.TotalBudgetQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalBudgetCost {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.TotalBudgetCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalBudgetCost\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.TotalBudgetCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CommittedHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.CommittedHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommittedHours\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.CommittedHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CommittedQuantity {
                get {
                    try {
                        return ((int)(this[this.tabletblJobCostCodePhase.CommittedQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommittedQuantity\' in table \'tblJobCostCodePhase\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.CommittedQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Cost {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OpenCommitment {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.OpenCommitmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpenCommitment\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.OpenCommitmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UsedHoursPercentage {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.UsedHoursPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsedHoursPercentage\' in table \'tblJobCostCodePhase\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.UsedHoursPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UsedQuantityPercentage {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.UsedQuantityPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsedQuantityPercentage\' in table \'tblJobCostCodePhase\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.UsedQuantityPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EstimatedPerformanceFactor {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.EstimatedPerformanceFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EstimatedPerformanceFactor\' in table \'tblJobCostCodePhase\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.EstimatedPerformanceFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DifferentialHours {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.DifferentialHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DifferentialHours\' in table \'tblJobCostCodePhase\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.DifferentialHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CurrentPerformanceHours {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.CurrentPerformanceHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentPerformanceHours\' in table \'tblJobCostCodePhase\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.CurrentPerformanceHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProjectedTotalHours {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.ProjectedTotalHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectedTotalHours\' in table \'tblJobCostCodePhase\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.ProjectedTotalHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProjectedCAC {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.ProjectedCACColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectedCAC\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.ProjectedCACColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RevisedCACMonthend {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.RevisedCACMonthendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RevisedCACMonthend\' in table \'tblJobCostCodePhase\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.RevisedCACMonthendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProjectedOverUnder {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.ProjectedOverUnderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectedOverUnder\' in table \'tblJobCostCodePhase\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.ProjectedOverUnderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ValueAdjustment {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.ValueAdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueAdjustment\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.ValueAdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ValueAdjustmentPercentage {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.ValueAdjustmentPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueAdjustmentPercentage\' in table \'tblJobCostCodePhase\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.ValueAdjustmentPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RevisedCAC {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.RevisedCACColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RevisedCAC\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.RevisedCACColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RevisedOverUnder {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.RevisedOverUnderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RevisedOverUnder\' in table \'tblJobCostCodePhase\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.RevisedOverUnderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RevisedPerformanceFactor {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.RevisedPerformanceFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RevisedPerformanceFactor\' in table \'tblJobCostCodePhase\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.RevisedPerformanceFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tabletblJobCostCodePhase.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MonthendCAC {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.MonthendCACColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MonthendCAC\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.MonthendCACColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MonthendValueAdjustment {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.MonthendValueAdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MonthendValueAdjustment\' in table \'tblJobCostCodePhase\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.MonthendValueAdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ActualCostPlusCommitment {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.ActualCostPlusCommitmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualCostPlusCommitment\' in table \'tblJobCostCodePhase\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.ActualCostPlusCommitmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UpdateMonthendValueAdjustment {
                get {
                    try {
                        return ((bool)(this[this.tabletblJobCostCodePhase.UpdateMonthendValueAdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdateMonthendValueAdjustment\' in table \'tblJobCostCodePhas" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.UpdateMonthendValueAdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BudgetLaborUnit {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.BudgetLaborUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BudgetLaborUnit\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.BudgetLaborUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ActualLaborUnit {
                get {
                    try {
                        return ((double)(this[this.tabletblJobCostCodePhase.ActualLaborUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualLaborUnit\' in table \'tblJobCostCodePhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobCostCodePhase.ActualLaborUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobIDNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.JobIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobIDNull() {
                this[this.tabletblJobCostCodePhase.JobIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobCostCodeTypeNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.JobCostCodeTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobCostCodeTypeNull() {
                this[this.tabletblJobCostCodePhase.JobCostCodeTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobCostCodePhaseNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.JobCostCodePhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobCostCodePhaseNull() {
                this[this.tabletblJobCostCodePhase.JobCostCodePhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCodeNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.CostCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCodeNull() {
                this[this.tabletblJobCostCodePhase.CostCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCodeTitleNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.CostCodeTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCodeTitleNull() {
                this[this.tabletblJobCostCodePhase.CostCodeTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCodeDescriptionNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.CostCodeDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCodeDescriptionNull() {
                this[this.tabletblJobCostCodePhase.CostCodeDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserDescriptionNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.UserDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserDescriptionNull() {
                this[this.tabletblJobCostCodePhase.UserDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tabletblJobCostCodePhase.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalContractHoursNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.OriginalContractHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalContractHoursNull() {
                this[this.tabletblJobCostCodePhase.OriginalContractHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalContractQuantityNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.OriginalContractQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalContractQuantityNull() {
                this[this.tabletblJobCostCodePhase.OriginalContractQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalContractCostNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.OriginalContractCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalContractCostNull() {
                this[this.tabletblJobCostCodePhase.OriginalContractCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedChangeOrderHoursNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.ApprovedChangeOrderHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedChangeOrderHoursNull() {
                this[this.tabletblJobCostCodePhase.ApprovedChangeOrderHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedChangeOrderQuantityNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.ApprovedChangeOrderQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedChangeOrderQuantityNull() {
                this[this.tabletblJobCostCodePhase.ApprovedChangeOrderQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedChangeOrderCostNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.ApprovedChangeOrderCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedChangeOrderCostNull() {
                this[this.tabletblJobCostCodePhase.ApprovedChangeOrderCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPendingWithProceedHoursNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.PendingWithProceedHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPendingWithProceedHoursNull() {
                this[this.tabletblJobCostCodePhase.PendingWithProceedHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPendingWithProceedQuantityNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.PendingWithProceedQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPendingWithProceedQuantityNull() {
                this[this.tabletblJobCostCodePhase.PendingWithProceedQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPendingWithProceedCostNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.PendingWithProceedCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPendingWithProceedCostNull() {
                this[this.tabletblJobCostCodePhase.PendingWithProceedCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPendingNoProceedHoursNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.PendingNoProceedHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPendingNoProceedHoursNull() {
                this[this.tabletblJobCostCodePhase.PendingNoProceedHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPendingNoProceedQuantityNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.PendingNoProceedQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPendingNoProceedQuantityNull() {
                this[this.tabletblJobCostCodePhase.PendingNoProceedQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPendingNoProceedCostNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.PendingNoProceedCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPendingNoProceedCostNull() {
                this[this.tabletblJobCostCodePhase.PendingNoProceedCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityAdjustmentNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.QuantityAdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityAdjustmentNull() {
                this[this.tabletblJobCostCodePhase.QuantityAdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalBudgetHoursNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.TotalBudgetHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalBudgetHoursNull() {
                this[this.tabletblJobCostCodePhase.TotalBudgetHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalBudgetQuantityNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.TotalBudgetQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalBudgetQuantityNull() {
                this[this.tabletblJobCostCodePhase.TotalBudgetQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalBudgetCostNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.TotalBudgetCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalBudgetCostNull() {
                this[this.tabletblJobCostCodePhase.TotalBudgetCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommittedHoursNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.CommittedHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommittedHoursNull() {
                this[this.tabletblJobCostCodePhase.CommittedHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommittedQuantityNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.CommittedQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommittedQuantityNull() {
                this[this.tabletblJobCostCodePhase.CommittedQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tabletblJobCostCodePhase.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpenCommitmentNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.OpenCommitmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOpenCommitmentNull() {
                this[this.tabletblJobCostCodePhase.OpenCommitmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsedHoursPercentageNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.UsedHoursPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsedHoursPercentageNull() {
                this[this.tabletblJobCostCodePhase.UsedHoursPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsedQuantityPercentageNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.UsedQuantityPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsedQuantityPercentageNull() {
                this[this.tabletblJobCostCodePhase.UsedQuantityPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstimatedPerformanceFactorNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.EstimatedPerformanceFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstimatedPerformanceFactorNull() {
                this[this.tabletblJobCostCodePhase.EstimatedPerformanceFactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDifferentialHoursNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.DifferentialHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDifferentialHoursNull() {
                this[this.tabletblJobCostCodePhase.DifferentialHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentPerformanceHoursNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.CurrentPerformanceHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentPerformanceHoursNull() {
                this[this.tabletblJobCostCodePhase.CurrentPerformanceHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectedTotalHoursNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.ProjectedTotalHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectedTotalHoursNull() {
                this[this.tabletblJobCostCodePhase.ProjectedTotalHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectedCACNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.ProjectedCACColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectedCACNull() {
                this[this.tabletblJobCostCodePhase.ProjectedCACColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRevisedCACMonthendNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.RevisedCACMonthendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRevisedCACMonthendNull() {
                this[this.tabletblJobCostCodePhase.RevisedCACMonthendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectedOverUnderNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.ProjectedOverUnderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectedOverUnderNull() {
                this[this.tabletblJobCostCodePhase.ProjectedOverUnderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueAdjustmentNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.ValueAdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueAdjustmentNull() {
                this[this.tabletblJobCostCodePhase.ValueAdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueAdjustmentPercentageNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.ValueAdjustmentPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueAdjustmentPercentageNull() {
                this[this.tabletblJobCostCodePhase.ValueAdjustmentPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRevisedCACNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.RevisedCACColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRevisedCACNull() {
                this[this.tabletblJobCostCodePhase.RevisedCACColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRevisedOverUnderNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.RevisedOverUnderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRevisedOverUnderNull() {
                this[this.tabletblJobCostCodePhase.RevisedOverUnderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRevisedPerformanceFactorNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.RevisedPerformanceFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRevisedPerformanceFactorNull() {
                this[this.tabletblJobCostCodePhase.RevisedPerformanceFactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tabletblJobCostCodePhase.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthendCACNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.MonthendCACColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthendCACNull() {
                this[this.tabletblJobCostCodePhase.MonthendCACColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthendValueAdjustmentNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.MonthendValueAdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthendValueAdjustmentNull() {
                this[this.tabletblJobCostCodePhase.MonthendValueAdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualCostPlusCommitmentNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.ActualCostPlusCommitmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualCostPlusCommitmentNull() {
                this[this.tabletblJobCostCodePhase.ActualCostPlusCommitmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateMonthendValueAdjustmentNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.UpdateMonthendValueAdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateMonthendValueAdjustmentNull() {
                this[this.tabletblJobCostCodePhase.UpdateMonthendValueAdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetLaborUnitNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.BudgetLaborUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetLaborUnitNull() {
                this[this.tabletblJobCostCodePhase.BudgetLaborUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualLaborUnitNull() {
                return this.IsNull(this.tabletblJobCostCodePhase.ActualLaborUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualLaborUnitNull() {
                this[this.tabletblJobCostCodePhase.ActualLaborUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row[] GetDataTable1Rows() {
                if ((this.Table.ChildRelations["Phase Detail"] == null)) {
                    return new DataTable1Row[0];
                }
                else {
                    return ((DataTable1Row[])(base.GetChildRows(this.Table.ChildRelations["Phase Detail"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable1Row : global::System.Data.DataRow {
            
            private DataTable1DataTable tableDataTable1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable1 = ((DataTable1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuantityToDate {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.QuantityToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QuantityToDate\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.QuantityToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HoursToDate {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.HoursToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoursToDate\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.HoursToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Earned {
                get {
                    try {
                        return ((double)(this[this.tableDataTable1.EarnedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Earned\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.EarnedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LaborPerformanceFactor {
                get {
                    try {
                        return ((double)(this[this.tableDataTable1.LaborPerformanceFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LaborPerformanceFactor\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.LaborPerformanceFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Quantity {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Hours {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.HoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hours\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.HoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Weekend {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDataTable1.WeekendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weekend\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.WeekendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobCostCodePhaseID {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.JobCostCodePhaseIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobCostCodePhaseID\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.JobCostCodePhaseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobCostCodePhaseRow tblJobCostCodePhaseRow {
                get {
                    return ((tblJobCostCodePhaseRow)(this.GetParentRow(this.Table.ParentRelations["Phase Detail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Phase Detail"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityToDateNull() {
                return this.IsNull(this.tableDataTable1.QuantityToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityToDateNull() {
                this[this.tableDataTable1.QuantityToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoursToDateNull() {
                return this.IsNull(this.tableDataTable1.HoursToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoursToDateNull() {
                this[this.tableDataTable1.HoursToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEarnedNull() {
                return this.IsNull(this.tableDataTable1.EarnedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEarnedNull() {
                this[this.tableDataTable1.EarnedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLaborPerformanceFactorNull() {
                return this.IsNull(this.tableDataTable1.LaborPerformanceFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLaborPerformanceFactorNull() {
                this[this.tableDataTable1.LaborPerformanceFactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableDataTable1.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tableDataTable1.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoursNull() {
                return this.IsNull(this.tableDataTable1.HoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoursNull() {
                this[this.tableDataTable1.HoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeekendNull() {
                return this.IsNull(this.tableDataTable1.WeekendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeekendNull() {
                this[this.tableDataTable1.WeekendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobCostCodePhaseIDNull() {
                return this.IsNull(this.tableDataTable1.JobCostCodePhaseIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobCostCodePhaseIDNull() {
                this[this.tableDataTable1.JobCostCodePhaseIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblJobCostCodePhaseRowChangeEvent : global::System.EventArgs {
            
            private tblJobCostCodePhaseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobCostCodePhaseRowChangeEvent(tblJobCostCodePhaseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobCostCodePhaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable1RowChangeEvent : global::System.EventArgs {
            
            private DataTable1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1RowChangeEvent(DataTable1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace CCEJobs.AtefDataSet13TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblJobCostCodePhaseTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblJobCostCodePhaseTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblJobCostCodePhase";
            tableMapping.ColumnMappings.Add("JobCostCodePhaseID", "JobCostCodePhaseID");
            tableMapping.ColumnMappings.Add("JobID", "JobID");
            tableMapping.ColumnMappings.Add("JobCostCodeType", "JobCostCodeType");
            tableMapping.ColumnMappings.Add("JobCostCodePhase", "JobCostCodePhase");
            tableMapping.ColumnMappings.Add("CostCode", "CostCode");
            tableMapping.ColumnMappings.Add("CostCodeTitle", "CostCodeTitle");
            tableMapping.ColumnMappings.Add("CostCodeDescription", "CostCodeDescription");
            tableMapping.ColumnMappings.Add("UserDescription", "UserDescription");
            tableMapping.ColumnMappings.Add("Unit", "Unit");
            tableMapping.ColumnMappings.Add("OriginalContractHours", "OriginalContractHours");
            tableMapping.ColumnMappings.Add("OriginalContractQuantity", "OriginalContractQuantity");
            tableMapping.ColumnMappings.Add("OriginalContractCost", "OriginalContractCost");
            tableMapping.ColumnMappings.Add("ApprovedChangeOrderHours", "ApprovedChangeOrderHours");
            tableMapping.ColumnMappings.Add("ApprovedChangeOrderQuantity", "ApprovedChangeOrderQuantity");
            tableMapping.ColumnMappings.Add("ApprovedChangeOrderCost", "ApprovedChangeOrderCost");
            tableMapping.ColumnMappings.Add("PendingWithProceedHours", "PendingWithProceedHours");
            tableMapping.ColumnMappings.Add("PendingWithProceedQuantity", "PendingWithProceedQuantity");
            tableMapping.ColumnMappings.Add("PendingWithProceedCost", "PendingWithProceedCost");
            tableMapping.ColumnMappings.Add("PendingNoProceedHours", "PendingNoProceedHours");
            tableMapping.ColumnMappings.Add("PendingNoProceedQuantity", "PendingNoProceedQuantity");
            tableMapping.ColumnMappings.Add("PendingNoProceedCost", "PendingNoProceedCost");
            tableMapping.ColumnMappings.Add("QuantityAdjustment", "QuantityAdjustment");
            tableMapping.ColumnMappings.Add("TotalBudgetHours", "TotalBudgetHours");
            tableMapping.ColumnMappings.Add("TotalBudgetQuantity", "TotalBudgetQuantity");
            tableMapping.ColumnMappings.Add("TotalBudgetCost", "TotalBudgetCost");
            tableMapping.ColumnMappings.Add("CommittedHours", "CommittedHours");
            tableMapping.ColumnMappings.Add("CommittedQuantity", "CommittedQuantity");
            tableMapping.ColumnMappings.Add("Cost", "Cost");
            tableMapping.ColumnMappings.Add("OpenCommitment", "OpenCommitment");
            tableMapping.ColumnMappings.Add("UsedHoursPercentage", "UsedHoursPercentage");
            tableMapping.ColumnMappings.Add("UsedQuantityPercentage", "UsedQuantityPercentage");
            tableMapping.ColumnMappings.Add("EstimatedPerformanceFactor", "EstimatedPerformanceFactor");
            tableMapping.ColumnMappings.Add("DifferentialHours", "DifferentialHours");
            tableMapping.ColumnMappings.Add("CurrentPerformanceHours", "CurrentPerformanceHours");
            tableMapping.ColumnMappings.Add("ProjectedTotalHours", "ProjectedTotalHours");
            tableMapping.ColumnMappings.Add("ProjectedCAC", "ProjectedCAC");
            tableMapping.ColumnMappings.Add("RevisedCACMonthend", "RevisedCACMonthend");
            tableMapping.ColumnMappings.Add("ProjectedOverUnder", "ProjectedOverUnder");
            tableMapping.ColumnMappings.Add("ValueAdjustment", "ValueAdjustment");
            tableMapping.ColumnMappings.Add("ValueAdjustmentPercentage", "ValueAdjustmentPercentage");
            tableMapping.ColumnMappings.Add("RevisedCAC", "RevisedCAC");
            tableMapping.ColumnMappings.Add("RevisedOverUnder", "RevisedOverUnder");
            tableMapping.ColumnMappings.Add("RevisedPerformanceFactor", "RevisedPerformanceFactor");
            tableMapping.ColumnMappings.Add("Selected", "Selected");
            tableMapping.ColumnMappings.Add("MonthendCAC", "MonthendCAC");
            tableMapping.ColumnMappings.Add("MonthendValueAdjustment", "MonthendValueAdjustment");
            tableMapping.ColumnMappings.Add("ActualCostPlusCommitment", "ActualCostPlusCommitment");
            tableMapping.ColumnMappings.Add("UpdateMonthendValueAdjustment", "UpdateMonthendValueAdjustment");
            tableMapping.ColumnMappings.Add("BudgetLaborUnit", "BudgetLaborUnit");
            tableMapping.ColumnMappings.Add("ActualLaborUnit", "ActualLaborUnit");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblJobCostCodePhase] WHERE (([JobCostCodePhaseID] = @Original_" +
                "JobCostCodePhaseID) AND ((@IsNull_JobID = 1 AND [JobID] IS NULL) OR ([JobID] = @" +
                "Original_JobID)) AND ((@IsNull_JobCostCodeType = 1 AND [JobCostCodeType] IS NULL" +
                ") OR ([JobCostCodeType] = @Original_JobCostCodeType)) AND ((@IsNull_JobCostCodeP" +
                "hase = 1 AND [JobCostCodePhase] IS NULL) OR ([JobCostCodePhase] = @Original_JobC" +
                "ostCodePhase)) AND ((@IsNull_CostCode = 1 AND [CostCode] IS NULL) OR ([CostCode]" +
                " = @Original_CostCode)) AND ((@IsNull_CostCodeTitle = 1 AND [CostCodeTitle] IS N" +
                "ULL) OR ([CostCodeTitle] = @Original_CostCodeTitle)) AND ((@IsNull_CostCodeDescr" +
                "iption = 1 AND [CostCodeDescription] IS NULL) OR ([CostCodeDescription] = @Origi" +
                "nal_CostCodeDescription)) AND ((@IsNull_UserDescription = 1 AND [UserDescription" +
                "] IS NULL) OR ([UserDescription] = @Original_UserDescription)) AND ((@IsNull_Uni" +
                "t = 1 AND [Unit] IS NULL) OR ([Unit] = @Original_Unit)) AND ((@IsNull_OriginalCo" +
                "ntractHours = 1 AND [OriginalContractHours] IS NULL) OR ([OriginalContractHours]" +
                " = @Original_OriginalContractHours)) AND ((@IsNull_OriginalContractQuantity = 1 " +
                "AND [OriginalContractQuantity] IS NULL) OR ([OriginalContractQuantity] = @Origin" +
                "al_OriginalContractQuantity)) AND ((@IsNull_OriginalContractCost = 1 AND [Origin" +
                "alContractCost] IS NULL) OR ([OriginalContractCost] = @Original_OriginalContract" +
                "Cost)) AND ((@IsNull_ApprovedChangeOrderHours = 1 AND [ApprovedChangeOrderHours]" +
                " IS NULL) OR ([ApprovedChangeOrderHours] = @Original_ApprovedChangeOrderHours)) " +
                "AND ((@IsNull_ApprovedChangeOrderQuantity = 1 AND [ApprovedChangeOrderQuantity] " +
                "IS NULL) OR ([ApprovedChangeOrderQuantity] = @Original_ApprovedChangeOrderQuanti" +
                "ty)) AND ((@IsNull_ApprovedChangeOrderCost = 1 AND [ApprovedChangeOrderCost] IS " +
                "NULL) OR ([ApprovedChangeOrderCost] = @Original_ApprovedChangeOrderCost)) AND ((" +
                "@IsNull_PendingWithProceedHours = 1 AND [PendingWithProceedHours] IS NULL) OR ([" +
                "PendingWithProceedHours] = @Original_PendingWithProceedHours)) AND ((@IsNull_Pen" +
                "dingWithProceedQuantity = 1 AND [PendingWithProceedQuantity] IS NULL) OR ([Pendi" +
                "ngWithProceedQuantity] = @Original_PendingWithProceedQuantity)) AND ((@IsNull_Pe" +
                "ndingWithProceedCost = 1 AND [PendingWithProceedCost] IS NULL) OR ([PendingWithP" +
                "roceedCost] = @Original_PendingWithProceedCost)) AND ((@IsNull_PendingNoProceedH" +
                "ours = 1 AND [PendingNoProceedHours] IS NULL) OR ([PendingNoProceedHours] = @Ori" +
                "ginal_PendingNoProceedHours)) AND ((@IsNull_PendingNoProceedQuantity = 1 AND [Pe" +
                "ndingNoProceedQuantity] IS NULL) OR ([PendingNoProceedQuantity] = @Original_Pend" +
                "ingNoProceedQuantity)) AND ((@IsNull_PendingNoProceedCost = 1 AND [PendingNoProc" +
                "eedCost] IS NULL) OR ([PendingNoProceedCost] = @Original_PendingNoProceedCost)) " +
                "AND ((@IsNull_QuantityAdjustment = 1 AND [QuantityAdjustment] IS NULL) OR ([Quan" +
                "tityAdjustment] = @Original_QuantityAdjustment)) AND ((@IsNull_TotalBudgetHours " +
                "= 1 AND [TotalBudgetHours] IS NULL) OR ([TotalBudgetHours] = @Original_TotalBudg" +
                "etHours)) AND ((@IsNull_TotalBudgetQuantity = 1 AND [TotalBudgetQuantity] IS NUL" +
                "L) OR ([TotalBudgetQuantity] = @Original_TotalBudgetQuantity)) AND ((@IsNull_Tot" +
                "alBudgetCost = 1 AND [TotalBudgetCost] IS NULL) OR ([TotalBudgetCost] = @Origina" +
                "l_TotalBudgetCost)) AND ((@IsNull_CommittedHours = 1 AND [CommittedHours] IS NUL" +
                "L) OR ([CommittedHours] = @Original_CommittedHours)) AND ((@IsNull_CommittedQuan" +
                "tity = 1 AND [CommittedQuantity] IS NULL) OR ([CommittedQuantity] = @Original_Co" +
                "mmittedQuantity)) AND ((@IsNull_Cost = 1 AND [Cost] IS NULL) OR ([Cost] = @Origi" +
                "nal_Cost)) AND ((@IsNull_OpenCommitment = 1 AND [OpenCommitment] IS NULL) OR ([O" +
                "penCommitment] = @Original_OpenCommitment)) AND ((@IsNull_UsedHoursPercentage = " +
                "1 AND [UsedHoursPercentage] IS NULL) OR ([UsedHoursPercentage] = @Original_UsedH" +
                "oursPercentage)) AND ((@IsNull_UsedQuantityPercentage = 1 AND [UsedQuantityPerce" +
                "ntage] IS NULL) OR ([UsedQuantityPercentage] = @Original_UsedQuantityPercentage)" +
                ") AND ((@IsNull_EstimatedPerformanceFactor = 1 AND [EstimatedPerformanceFactor] " +
                "IS NULL) OR ([EstimatedPerformanceFactor] = @Original_EstimatedPerformanceFactor" +
                ")) AND ((@IsNull_DifferentialHours = 1 AND [DifferentialHours] IS NULL) OR ([Dif" +
                "ferentialHours] = @Original_DifferentialHours)) AND ((@IsNull_CurrentPerformance" +
                "Hours = 1 AND [CurrentPerformanceHours] IS NULL) OR ([CurrentPerformanceHours] =" +
                " @Original_CurrentPerformanceHours)) AND ((@IsNull_ProjectedTotalHours = 1 AND [" +
                "ProjectedTotalHours] IS NULL) OR ([ProjectedTotalHours] = @Original_ProjectedTot" +
                "alHours)) AND ((@IsNull_ProjectedCAC = 1 AND [ProjectedCAC] IS NULL) OR ([Projec" +
                "tedCAC] = @Original_ProjectedCAC)) AND ((@IsNull_RevisedCACMonthend = 1 AND [Rev" +
                "isedCACMonthend] IS NULL) OR ([RevisedCACMonthend] = @Original_RevisedCACMonthen" +
                "d)) AND ((@IsNull_ProjectedOverUnder = 1 AND [ProjectedOverUnder] IS NULL) OR ([" +
                "ProjectedOverUnder] = @Original_ProjectedOverUnder)) AND ((@IsNull_ValueAdjustme" +
                "nt = 1 AND [ValueAdjustment] IS NULL) OR ([ValueAdjustment] = @Original_ValueAdj" +
                "ustment)) AND ((@IsNull_ValueAdjustmentPercentage = 1 AND [ValueAdjustmentPercen" +
                "tage] IS NULL) OR ([ValueAdjustmentPercentage] = @Original_ValueAdjustmentPercen" +
                "tage)) AND ((@IsNull_RevisedCAC = 1 AND [RevisedCAC] IS NULL) OR ([RevisedCAC] =" +
                " @Original_RevisedCAC)) AND ((@IsNull_RevisedOverUnder = 1 AND [RevisedOverUnder" +
                "] IS NULL) OR ([RevisedOverUnder] = @Original_RevisedOverUnder)) AND ((@IsNull_R" +
                "evisedPerformanceFactor = 1 AND [RevisedPerformanceFactor] IS NULL) OR ([Revised" +
                "PerformanceFactor] = @Original_RevisedPerformanceFactor)) AND ((@IsNull_Selected" +
                " = 1 AND [Selected] IS NULL) OR ([Selected] = @Original_Selected)) AND ((@IsNull" +
                "_MonthendCAC = 1 AND [MonthendCAC] IS NULL) OR ([MonthendCAC] = @Original_Monthe" +
                "ndCAC)) AND ((@IsNull_MonthendValueAdjustment = 1 AND [MonthendValueAdjustment] " +
                "IS NULL) OR ([MonthendValueAdjustment] = @Original_MonthendValueAdjustment)) AND" +
                " ((@IsNull_ActualCostPlusCommitment = 1 AND [ActualCostPlusCommitment] IS NULL) " +
                "OR ([ActualCostPlusCommitment] = @Original_ActualCostPlusCommitment)) AND ((@IsN" +
                "ull_UpdateMonthendValueAdjustment = 1 AND [UpdateMonthendValueAdjustment] IS NUL" +
                "L) OR ([UpdateMonthendValueAdjustment] = @Original_UpdateMonthendValueAdjustment" +
                ")) AND ((@IsNull_BudgetLaborUnit = 1 AND [BudgetLaborUnit] IS NULL) OR ([BudgetL" +
                "aborUnit] = @Original_BudgetLaborUnit)) AND ((@IsNull_ActualLaborUnit = 1 AND [A" +
                "ctualLaborUnit] IS NULL) OR ([ActualLaborUnit] = @Original_ActualLaborUnit)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JobCostCodePhaseID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodePhaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_JobID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JobID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_JobCostCodeType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodeType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JobCostCodeType", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodeType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_JobCostCodePhase", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodePhase", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JobCostCodePhase", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodePhase", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCode", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostCodeTitle", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCodeTitle", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCodeTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCodeTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostCodeDescription", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCodeDescription", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCodeDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCodeDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserDescription", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserDescription", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Unit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Unit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Unit", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Unit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalContractHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalContractHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalContractQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalContractQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalContractCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalContractCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedChangeOrderHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedChangeOrderHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedChangeOrderQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedChangeOrderQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedChangeOrderCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedChangeOrderCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PendingWithProceedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PendingWithProceedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PendingWithProceedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PendingWithProceedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PendingWithProceedCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PendingWithProceedCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PendingNoProceedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PendingNoProceedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PendingNoProceedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PendingNoProceedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PendingNoProceedCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PendingNoProceedCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QuantityAdjustment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityAdjustment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QuantityAdjustment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityAdjustment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TotalBudgetHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalBudgetHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TotalBudgetQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalBudgetQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TotalBudgetCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalBudgetCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CommittedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommittedHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CommittedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommittedHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CommittedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommittedQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CommittedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommittedQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Cost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Cost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OpenCommitment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpenCommitment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OpenCommitment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpenCommitment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UsedHoursPercentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UsedHoursPercentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UsedHoursPercentage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UsedHoursPercentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UsedQuantityPercentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UsedQuantityPercentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UsedQuantityPercentage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UsedQuantityPercentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EstimatedPerformanceFactor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstimatedPerformanceFactor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EstimatedPerformanceFactor", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstimatedPerformanceFactor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DifferentialHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DifferentialHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DifferentialHours", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DifferentialHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CurrentPerformanceHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentPerformanceHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CurrentPerformanceHours", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentPerformanceHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProjectedTotalHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedTotalHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectedTotalHours", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedTotalHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProjectedCAC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedCAC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectedCAC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedCAC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RevisedCACMonthend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedCACMonthend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RevisedCACMonthend", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedCACMonthend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProjectedOverUnder", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedOverUnder", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectedOverUnder", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedOverUnder", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ValueAdjustment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValueAdjustment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ValueAdjustment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValueAdjustment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ValueAdjustmentPercentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValueAdjustmentPercentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ValueAdjustmentPercentage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValueAdjustmentPercentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RevisedCAC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedCAC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RevisedCAC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedCAC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RevisedOverUnder", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedOverUnder", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RevisedOverUnder", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedOverUnder", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RevisedPerformanceFactor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedPerformanceFactor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RevisedPerformanceFactor", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedPerformanceFactor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Selected", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Selected", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Selected", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Selected", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MonthendCAC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthendCAC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MonthendCAC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthendCAC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MonthendValueAdjustment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthendValueAdjustment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MonthendValueAdjustment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthendValueAdjustment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualCostPlusCommitment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualCostPlusCommitment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualCostPlusCommitment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualCostPlusCommitment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UpdateMonthendValueAdjustment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateMonthendValueAdjustment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateMonthendValueAdjustment", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateMonthendValueAdjustment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BudgetLaborUnit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BudgetLaborUnit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BudgetLaborUnit", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BudgetLaborUnit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualLaborUnit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualLaborUnit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualLaborUnit", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualLaborUnit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblJobCostCodePhase] ([JobID], [JobCostCodeType], [JobCostCode" +
                "Phase], [CostCode], [CostCodeTitle], [CostCodeDescription], [UserDescription], [" +
                "Unit], [OriginalContractHours], [OriginalContractQuantity], [OriginalContractCos" +
                "t], [ApprovedChangeOrderHours], [ApprovedChangeOrderQuantity], [ApprovedChangeOr" +
                "derCost], [PendingWithProceedHours], [PendingWithProceedQuantity], [PendingWithP" +
                "roceedCost], [PendingNoProceedHours], [PendingNoProceedQuantity], [PendingNoProc" +
                "eedCost], [QuantityAdjustment], [TotalBudgetHours], [TotalBudgetQuantity], [Tota" +
                "lBudgetCost], [CommittedHours], [CommittedQuantity], [Cost], [OpenCommitment], [" +
                "UsedHoursPercentage], [UsedQuantityPercentage], [EstimatedPerformanceFactor], [D" +
                "ifferentialHours], [CurrentPerformanceHours], [ProjectedTotalHours], [ProjectedC" +
                "AC], [RevisedCACMonthend], [ProjectedOverUnder], [ValueAdjustment], [ValueAdjust" +
                "mentPercentage], [RevisedCAC], [RevisedOverUnder], [RevisedPerformanceFactor], [" +
                "Selected], [MonthendCAC], [MonthendValueAdjustment], [ActualCostPlusCommitment]," +
                " [UpdateMonthendValueAdjustment], [BudgetLaborUnit], [ActualLaborUnit]) VALUES (" +
                "@JobID, @JobCostCodeType, @JobCostCodePhase, @CostCode, @CostCodeTitle, @CostCod" +
                "eDescription, @UserDescription, @Unit, @OriginalContractHours, @OriginalContract" +
                "Quantity, @OriginalContractCost, @ApprovedChangeOrderHours, @ApprovedChangeOrder" +
                "Quantity, @ApprovedChangeOrderCost, @PendingWithProceedHours, @PendingWithProcee" +
                "dQuantity, @PendingWithProceedCost, @PendingNoProceedHours, @PendingNoProceedQua" +
                "ntity, @PendingNoProceedCost, @QuantityAdjustment, @TotalBudgetHours, @TotalBudg" +
                "etQuantity, @TotalBudgetCost, @CommittedHours, @CommittedQuantity, @Cost, @OpenC" +
                "ommitment, @UsedHoursPercentage, @UsedQuantityPercentage, @EstimatedPerformanceF" +
                "actor, @DifferentialHours, @CurrentPerformanceHours, @ProjectedTotalHours, @Proj" +
                "ectedCAC, @RevisedCACMonthend, @ProjectedOverUnder, @ValueAdjustment, @ValueAdju" +
                "stmentPercentage, @RevisedCAC, @RevisedOverUnder, @RevisedPerformanceFactor, @Se" +
                "lected, @MonthendCAC, @MonthendValueAdjustment, @ActualCostPlusCommitment, @Upda" +
                "teMonthendValueAdjustment, @BudgetLaborUnit, @ActualLaborUnit);\r\nSELECT JobCostC" +
                "odePhaseID, JobID, JobCostCodeType, JobCostCodePhase, CostCode, CostCodeTitle, C" +
                "ostCodeDescription, UserDescription, Unit, OriginalContractHours, OriginalContra" +
                "ctQuantity, OriginalContractCost, ApprovedChangeOrderHours, ApprovedChangeOrderQ" +
                "uantity, ApprovedChangeOrderCost, PendingWithProceedHours, PendingWithProceedQua" +
                "ntity, PendingWithProceedCost, PendingNoProceedHours, PendingNoProceedQuantity, " +
                "PendingNoProceedCost, QuantityAdjustment, TotalBudgetHours, TotalBudgetQuantity," +
                " TotalBudgetCost, CommittedHours, CommittedQuantity, Cost, OpenCommitment, UsedH" +
                "oursPercentage, UsedQuantityPercentage, EstimatedPerformanceFactor, Differential" +
                "Hours, CurrentPerformanceHours, ProjectedTotalHours, ProjectedCAC, RevisedCACMon" +
                "thend, ProjectedOverUnder, ValueAdjustment, ValueAdjustmentPercentage, RevisedCA" +
                "C, RevisedOverUnder, RevisedPerformanceFactor, Selected, MonthendCAC, MonthendVa" +
                "lueAdjustment, ActualCostPlusCommitment, UpdateMonthendValueAdjustment, BudgetLa" +
                "borUnit, ActualLaborUnit FROM tblJobCostCodePhase WHERE (JobCostCodePhaseID = SC" +
                "OPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JobID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JobCostCodeType", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodeType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JobCostCodePhase", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodePhase", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCode", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCodeTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCodeTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCodeDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCodeDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Unit", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Unit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalContractHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalContractQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalContractCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedChangeOrderHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedChangeOrderQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedChangeOrderCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PendingWithProceedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PendingWithProceedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PendingWithProceedCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PendingNoProceedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PendingNoProceedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PendingNoProceedCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QuantityAdjustment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityAdjustment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalBudgetHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalBudgetQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalBudgetCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CommittedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommittedHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CommittedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommittedQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OpenCommitment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpenCommitment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UsedHoursPercentage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UsedHoursPercentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UsedQuantityPercentage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UsedQuantityPercentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EstimatedPerformanceFactor", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstimatedPerformanceFactor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DifferentialHours", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DifferentialHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CurrentPerformanceHours", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentPerformanceHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectedTotalHours", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedTotalHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectedCAC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedCAC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RevisedCACMonthend", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedCACMonthend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectedOverUnder", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedOverUnder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ValueAdjustment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValueAdjustment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ValueAdjustmentPercentage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValueAdjustmentPercentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RevisedCAC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedCAC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RevisedOverUnder", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedOverUnder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RevisedPerformanceFactor", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedPerformanceFactor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Selected", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Selected", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MonthendCAC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthendCAC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MonthendValueAdjustment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthendValueAdjustment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualCostPlusCommitment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualCostPlusCommitment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateMonthendValueAdjustment", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateMonthendValueAdjustment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BudgetLaborUnit", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BudgetLaborUnit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualLaborUnit", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualLaborUnit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblJobCostCodePhase] SET [JobID] = @JobID, [JobCostCodeType] = @Job" +
                "CostCodeType, [JobCostCodePhase] = @JobCostCodePhase, [CostCode] = @CostCode, [C" +
                "ostCodeTitle] = @CostCodeTitle, [CostCodeDescription] = @CostCodeDescription, [U" +
                "serDescription] = @UserDescription, [Unit] = @Unit, [OriginalContractHours] = @O" +
                "riginalContractHours, [OriginalContractQuantity] = @OriginalContractQuantity, [O" +
                "riginalContractCost] = @OriginalContractCost, [ApprovedChangeOrderHours] = @Appr" +
                "ovedChangeOrderHours, [ApprovedChangeOrderQuantity] = @ApprovedChangeOrderQuanti" +
                "ty, [ApprovedChangeOrderCost] = @ApprovedChangeOrderCost, [PendingWithProceedHou" +
                "rs] = @PendingWithProceedHours, [PendingWithProceedQuantity] = @PendingWithProce" +
                "edQuantity, [PendingWithProceedCost] = @PendingWithProceedCost, [PendingNoProcee" +
                "dHours] = @PendingNoProceedHours, [PendingNoProceedQuantity] = @PendingNoProceed" +
                "Quantity, [PendingNoProceedCost] = @PendingNoProceedCost, [QuantityAdjustment] =" +
                " @QuantityAdjustment, [TotalBudgetHours] = @TotalBudgetHours, [TotalBudgetQuanti" +
                "ty] = @TotalBudgetQuantity, [TotalBudgetCost] = @TotalBudgetCost, [CommittedHour" +
                "s] = @CommittedHours, [CommittedQuantity] = @CommittedQuantity, [Cost] = @Cost, " +
                "[OpenCommitment] = @OpenCommitment, [UsedHoursPercentage] = @UsedHoursPercentage" +
                ", [UsedQuantityPercentage] = @UsedQuantityPercentage, [EstimatedPerformanceFacto" +
                "r] = @EstimatedPerformanceFactor, [DifferentialHours] = @DifferentialHours, [Cur" +
                "rentPerformanceHours] = @CurrentPerformanceHours, [ProjectedTotalHours] = @Proje" +
                "ctedTotalHours, [ProjectedCAC] = @ProjectedCAC, [RevisedCACMonthend] = @RevisedC" +
                "ACMonthend, [ProjectedOverUnder] = @ProjectedOverUnder, [ValueAdjustment] = @Val" +
                "ueAdjustment, [ValueAdjustmentPercentage] = @ValueAdjustmentPercentage, [Revised" +
                "CAC] = @RevisedCAC, [RevisedOverUnder] = @RevisedOverUnder, [RevisedPerformanceF" +
                "actor] = @RevisedPerformanceFactor, [Selected] = @Selected, [MonthendCAC] = @Mon" +
                "thendCAC, [MonthendValueAdjustment] = @MonthendValueAdjustment, [ActualCostPlusC" +
                "ommitment] = @ActualCostPlusCommitment, [UpdateMonthendValueAdjustment] = @Updat" +
                "eMonthendValueAdjustment, [BudgetLaborUnit] = @BudgetLaborUnit, [ActualLaborUnit" +
                "] = @ActualLaborUnit WHERE (([JobCostCodePhaseID] = @Original_JobCostCodePhaseID" +
                ") AND ((@IsNull_JobID = 1 AND [JobID] IS NULL) OR ([JobID] = @Original_JobID)) A" +
                "ND ((@IsNull_JobCostCodeType = 1 AND [JobCostCodeType] IS NULL) OR ([JobCostCode" +
                "Type] = @Original_JobCostCodeType)) AND ((@IsNull_JobCostCodePhase = 1 AND [JobC" +
                "ostCodePhase] IS NULL) OR ([JobCostCodePhase] = @Original_JobCostCodePhase)) AND" +
                " ((@IsNull_CostCode = 1 AND [CostCode] IS NULL) OR ([CostCode] = @Original_CostC" +
                "ode)) AND ((@IsNull_CostCodeTitle = 1 AND [CostCodeTitle] IS NULL) OR ([CostCode" +
                "Title] = @Original_CostCodeTitle)) AND ((@IsNull_CostCodeDescription = 1 AND [Co" +
                "stCodeDescription] IS NULL) OR ([CostCodeDescription] = @Original_CostCodeDescri" +
                "ption)) AND ((@IsNull_UserDescription = 1 AND [UserDescription] IS NULL) OR ([Us" +
                "erDescription] = @Original_UserDescription)) AND ((@IsNull_Unit = 1 AND [Unit] I" +
                "S NULL) OR ([Unit] = @Original_Unit)) AND ((@IsNull_OriginalContractHours = 1 AN" +
                "D [OriginalContractHours] IS NULL) OR ([OriginalContractHours] = @Original_Origi" +
                "nalContractHours)) AND ((@IsNull_OriginalContractQuantity = 1 AND [OriginalContr" +
                "actQuantity] IS NULL) OR ([OriginalContractQuantity] = @Original_OriginalContrac" +
                "tQuantity)) AND ((@IsNull_OriginalContractCost = 1 AND [OriginalContractCost] IS" +
                " NULL) OR ([OriginalContractCost] = @Original_OriginalContractCost)) AND ((@IsNu" +
                "ll_ApprovedChangeOrderHours = 1 AND [ApprovedChangeOrderHours] IS NULL) OR ([App" +
                "rovedChangeOrderHours] = @Original_ApprovedChangeOrderHours)) AND ((@IsNull_Appr" +
                "ovedChangeOrderQuantity = 1 AND [ApprovedChangeOrderQuantity] IS NULL) OR ([Appr" +
                "ovedChangeOrderQuantity] = @Original_ApprovedChangeOrderQuantity)) AND ((@IsNull" +
                "_ApprovedChangeOrderCost = 1 AND [ApprovedChangeOrderCost] IS NULL) OR ([Approve" +
                "dChangeOrderCost] = @Original_ApprovedChangeOrderCost)) AND ((@IsNull_PendingWit" +
                "hProceedHours = 1 AND [PendingWithProceedHours] IS NULL) OR ([PendingWithProceed" +
                "Hours] = @Original_PendingWithProceedHours)) AND ((@IsNull_PendingWithProceedQua" +
                "ntity = 1 AND [PendingWithProceedQuantity] IS NULL) OR ([PendingWithProceedQuant" +
                "ity] = @Original_PendingWithProceedQuantity)) AND ((@IsNull_PendingWithProceedCo" +
                "st = 1 AND [PendingWithProceedCost] IS NULL) OR ([PendingWithProceedCost] = @Ori" +
                "ginal_PendingWithProceedCost)) AND ((@IsNull_PendingNoProceedHours = 1 AND [Pend" +
                "ingNoProceedHours] IS NULL) OR ([PendingNoProceedHours] = @Original_PendingNoPro" +
                "ceedHours)) AND ((@IsNull_PendingNoProceedQuantity = 1 AND [PendingNoProceedQuan" +
                "tity] IS NULL) OR ([PendingNoProceedQuantity] = @Original_PendingNoProceedQuanti" +
                "ty)) AND ((@IsNull_PendingNoProceedCost = 1 AND [PendingNoProceedCost] IS NULL) " +
                "OR ([PendingNoProceedCost] = @Original_PendingNoProceedCost)) AND ((@IsNull_Quan" +
                "tityAdjustment = 1 AND [QuantityAdjustment] IS NULL) OR ([QuantityAdjustment] = " +
                "@Original_QuantityAdjustment)) AND ((@IsNull_TotalBudgetHours = 1 AND [TotalBudg" +
                "etHours] IS NULL) OR ([TotalBudgetHours] = @Original_TotalBudgetHours)) AND ((@I" +
                "sNull_TotalBudgetQuantity = 1 AND [TotalBudgetQuantity] IS NULL) OR ([TotalBudge" +
                "tQuantity] = @Original_TotalBudgetQuantity)) AND ((@IsNull_TotalBudgetCost = 1 A" +
                "ND [TotalBudgetCost] IS NULL) OR ([TotalBudgetCost] = @Original_TotalBudgetCost)" +
                ") AND ((@IsNull_CommittedHours = 1 AND [CommittedHours] IS NULL) OR ([CommittedH" +
                "ours] = @Original_CommittedHours)) AND ((@IsNull_CommittedQuantity = 1 AND [Comm" +
                "ittedQuantity] IS NULL) OR ([CommittedQuantity] = @Original_CommittedQuantity)) " +
                "AND ((@IsNull_Cost = 1 AND [Cost] IS NULL) OR ([Cost] = @Original_Cost)) AND ((@" +
                "IsNull_OpenCommitment = 1 AND [OpenCommitment] IS NULL) OR ([OpenCommitment] = @" +
                "Original_OpenCommitment)) AND ((@IsNull_UsedHoursPercentage = 1 AND [UsedHoursPe" +
                "rcentage] IS NULL) OR ([UsedHoursPercentage] = @Original_UsedHoursPercentage)) A" +
                "ND ((@IsNull_UsedQuantityPercentage = 1 AND [UsedQuantityPercentage] IS NULL) OR" +
                " ([UsedQuantityPercentage] = @Original_UsedQuantityPercentage)) AND ((@IsNull_Es" +
                "timatedPerformanceFactor = 1 AND [EstimatedPerformanceFactor] IS NULL) OR ([Esti" +
                "matedPerformanceFactor] = @Original_EstimatedPerformanceFactor)) AND ((@IsNull_D" +
                "ifferentialHours = 1 AND [DifferentialHours] IS NULL) OR ([DifferentialHours] = " +
                "@Original_DifferentialHours)) AND ((@IsNull_CurrentPerformanceHours = 1 AND [Cur" +
                "rentPerformanceHours] IS NULL) OR ([CurrentPerformanceHours] = @Original_Current" +
                "PerformanceHours)) AND ((@IsNull_ProjectedTotalHours = 1 AND [ProjectedTotalHour" +
                "s] IS NULL) OR ([ProjectedTotalHours] = @Original_ProjectedTotalHours)) AND ((@I" +
                "sNull_ProjectedCAC = 1 AND [ProjectedCAC] IS NULL) OR ([ProjectedCAC] = @Origina" +
                "l_ProjectedCAC)) AND ((@IsNull_RevisedCACMonthend = 1 AND [RevisedCACMonthend] I" +
                "S NULL) OR ([RevisedCACMonthend] = @Original_RevisedCACMonthend)) AND ((@IsNull_" +
                "ProjectedOverUnder = 1 AND [ProjectedOverUnder] IS NULL) OR ([ProjectedOverUnder" +
                "] = @Original_ProjectedOverUnder)) AND ((@IsNull_ValueAdjustment = 1 AND [ValueA" +
                "djustment] IS NULL) OR ([ValueAdjustment] = @Original_ValueAdjustment)) AND ((@I" +
                "sNull_ValueAdjustmentPercentage = 1 AND [ValueAdjustmentPercentage] IS NULL) OR " +
                "([ValueAdjustmentPercentage] = @Original_ValueAdjustmentPercentage)) AND ((@IsNu" +
                "ll_RevisedCAC = 1 AND [RevisedCAC] IS NULL) OR ([RevisedCAC] = @Original_Revised" +
                "CAC)) AND ((@IsNull_RevisedOverUnder = 1 AND [RevisedOverUnder] IS NULL) OR ([Re" +
                "visedOverUnder] = @Original_RevisedOverUnder)) AND ((@IsNull_RevisedPerformanceF" +
                "actor = 1 AND [RevisedPerformanceFactor] IS NULL) OR ([RevisedPerformanceFactor]" +
                " = @Original_RevisedPerformanceFactor)) AND ((@IsNull_Selected = 1 AND [Selected" +
                "] IS NULL) OR ([Selected] = @Original_Selected)) AND ((@IsNull_MonthendCAC = 1 A" +
                "ND [MonthendCAC] IS NULL) OR ([MonthendCAC] = @Original_MonthendCAC)) AND ((@IsN" +
                "ull_MonthendValueAdjustment = 1 AND [MonthendValueAdjustment] IS NULL) OR ([Mont" +
                "hendValueAdjustment] = @Original_MonthendValueAdjustment)) AND ((@IsNull_ActualC" +
                "ostPlusCommitment = 1 AND [ActualCostPlusCommitment] IS NULL) OR ([ActualCostPlu" +
                "sCommitment] = @Original_ActualCostPlusCommitment)) AND ((@IsNull_UpdateMonthend" +
                "ValueAdjustment = 1 AND [UpdateMonthendValueAdjustment] IS NULL) OR ([UpdateMont" +
                "hendValueAdjustment] = @Original_UpdateMonthendValueAdjustment)) AND ((@IsNull_B" +
                "udgetLaborUnit = 1 AND [BudgetLaborUnit] IS NULL) OR ([BudgetLaborUnit] = @Origi" +
                "nal_BudgetLaborUnit)) AND ((@IsNull_ActualLaborUnit = 1 AND [ActualLaborUnit] IS" +
                " NULL) OR ([ActualLaborUnit] = @Original_ActualLaborUnit)));\r\nSELECT JobCostCode" +
                "PhaseID, JobID, JobCostCodeType, JobCostCodePhase, CostCode, CostCodeTitle, Cost" +
                "CodeDescription, UserDescription, Unit, OriginalContractHours, OriginalContractQ" +
                "uantity, OriginalContractCost, ApprovedChangeOrderHours, ApprovedChangeOrderQuan" +
                "tity, ApprovedChangeOrderCost, PendingWithProceedHours, PendingWithProceedQuanti" +
                "ty, PendingWithProceedCost, PendingNoProceedHours, PendingNoProceedQuantity, Pen" +
                "dingNoProceedCost, QuantityAdjustment, TotalBudgetHours, TotalBudgetQuantity, To" +
                "talBudgetCost, CommittedHours, CommittedQuantity, Cost, OpenCommitment, UsedHour" +
                "sPercentage, UsedQuantityPercentage, EstimatedPerformanceFactor, DifferentialHou" +
                "rs, CurrentPerformanceHours, ProjectedTotalHours, ProjectedCAC, RevisedCACMonthe" +
                "nd, ProjectedOverUnder, ValueAdjustment, ValueAdjustmentPercentage, RevisedCAC, " +
                "RevisedOverUnder, RevisedPerformanceFactor, Selected, MonthendCAC, MonthendValue" +
                "Adjustment, ActualCostPlusCommitment, UpdateMonthendValueAdjustment, BudgetLabor" +
                "Unit, ActualLaborUnit FROM tblJobCostCodePhase WHERE (JobCostCodePhaseID = @JobC" +
                "ostCodePhaseID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JobID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JobCostCodeType", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodeType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JobCostCodePhase", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodePhase", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCode", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCodeTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCodeTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCodeDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCodeDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Unit", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Unit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalContractHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalContractQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OriginalContractCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedChangeOrderHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedChangeOrderQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApprovedChangeOrderCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PendingWithProceedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PendingWithProceedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PendingWithProceedCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PendingNoProceedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PendingNoProceedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PendingNoProceedCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QuantityAdjustment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityAdjustment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalBudgetHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalBudgetQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalBudgetCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CommittedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommittedHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CommittedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommittedQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OpenCommitment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpenCommitment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UsedHoursPercentage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UsedHoursPercentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UsedQuantityPercentage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UsedQuantityPercentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EstimatedPerformanceFactor", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstimatedPerformanceFactor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DifferentialHours", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DifferentialHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CurrentPerformanceHours", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentPerformanceHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectedTotalHours", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedTotalHours", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectedCAC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedCAC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RevisedCACMonthend", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedCACMonthend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectedOverUnder", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedOverUnder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ValueAdjustment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValueAdjustment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ValueAdjustmentPercentage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValueAdjustmentPercentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RevisedCAC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedCAC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RevisedOverUnder", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedOverUnder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RevisedPerformanceFactor", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedPerformanceFactor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Selected", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Selected", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MonthendCAC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthendCAC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MonthendValueAdjustment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthendValueAdjustment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualCostPlusCommitment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualCostPlusCommitment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateMonthendValueAdjustment", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateMonthendValueAdjustment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BudgetLaborUnit", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BudgetLaborUnit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualLaborUnit", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualLaborUnit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JobCostCodePhaseID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodePhaseID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_JobID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JobID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_JobCostCodeType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodeType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JobCostCodeType", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodeType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_JobCostCodePhase", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodePhase", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JobCostCodePhase", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodePhase", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCode", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostCodeTitle", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCodeTitle", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCodeTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCodeTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CostCodeDescription", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCodeDescription", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCodeDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCodeDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserDescription", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserDescription", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserDescription", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserDescription", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Unit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Unit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Unit", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Unit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalContractHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalContractHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalContractQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalContractQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OriginalContractCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OriginalContractCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OriginalContractCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedChangeOrderHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedChangeOrderHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedChangeOrderQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedChangeOrderQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ApprovedChangeOrderCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApprovedChangeOrderCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApprovedChangeOrderCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PendingWithProceedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PendingWithProceedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PendingWithProceedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PendingWithProceedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PendingWithProceedCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PendingWithProceedCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingWithProceedCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PendingNoProceedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PendingNoProceedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PendingNoProceedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PendingNoProceedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PendingNoProceedCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PendingNoProceedCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PendingNoProceedCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QuantityAdjustment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityAdjustment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QuantityAdjustment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityAdjustment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TotalBudgetHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalBudgetHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TotalBudgetQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalBudgetQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TotalBudgetCost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetCost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalBudgetCost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalBudgetCost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CommittedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommittedHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CommittedHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommittedHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CommittedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommittedQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CommittedQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommittedQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Cost", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Cost", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cost", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OpenCommitment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpenCommitment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OpenCommitment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpenCommitment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UsedHoursPercentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UsedHoursPercentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UsedHoursPercentage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UsedHoursPercentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UsedQuantityPercentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UsedQuantityPercentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UsedQuantityPercentage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UsedQuantityPercentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EstimatedPerformanceFactor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstimatedPerformanceFactor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EstimatedPerformanceFactor", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstimatedPerformanceFactor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DifferentialHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DifferentialHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DifferentialHours", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DifferentialHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CurrentPerformanceHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentPerformanceHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CurrentPerformanceHours", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentPerformanceHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProjectedTotalHours", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedTotalHours", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectedTotalHours", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedTotalHours", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProjectedCAC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedCAC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectedCAC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedCAC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RevisedCACMonthend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedCACMonthend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RevisedCACMonthend", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedCACMonthend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProjectedOverUnder", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedOverUnder", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectedOverUnder", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectedOverUnder", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ValueAdjustment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValueAdjustment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ValueAdjustment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValueAdjustment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ValueAdjustmentPercentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValueAdjustmentPercentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ValueAdjustmentPercentage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ValueAdjustmentPercentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RevisedCAC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedCAC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RevisedCAC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedCAC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RevisedOverUnder", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedOverUnder", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RevisedOverUnder", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedOverUnder", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RevisedPerformanceFactor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedPerformanceFactor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RevisedPerformanceFactor", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RevisedPerformanceFactor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Selected", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Selected", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Selected", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Selected", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MonthendCAC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthendCAC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MonthendCAC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthendCAC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MonthendValueAdjustment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthendValueAdjustment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MonthendValueAdjustment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MonthendValueAdjustment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualCostPlusCommitment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualCostPlusCommitment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualCostPlusCommitment", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualCostPlusCommitment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UpdateMonthendValueAdjustment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateMonthendValueAdjustment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateMonthendValueAdjustment", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateMonthendValueAdjustment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BudgetLaborUnit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BudgetLaborUnit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BudgetLaborUnit", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BudgetLaborUnit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActualLaborUnit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualLaborUnit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualLaborUnit", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualLaborUnit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JobCostCodePhaseID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "JobCostCodePhaseID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CCEJobs.Properties.Settings.Default.AtefConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT JobCostCodePhaseID, JobID, JobCostCodeType, JobCostCodePhase, CostCode, CostCodeTitle, CostCodeDescription, UserDescription, Unit, OriginalContractHours, OriginalContractQuantity, OriginalContractCost, ApprovedChangeOrderHours, ApprovedChangeOrderQuantity, ApprovedChangeOrderCost, PendingWithProceedHours, PendingWithProceedQuantity, PendingWithProceedCost, PendingNoProceedHours, PendingNoProceedQuantity, PendingNoProceedCost, QuantityAdjustment, TotalBudgetHours, TotalBudgetQuantity, TotalBudgetCost, CommittedHours, CommittedQuantity, Cost, OpenCommitment, UsedHoursPercentage, UsedQuantityPercentage, EstimatedPerformanceFactor, DifferentialHours, CurrentPerformanceHours, ProjectedTotalHours, ProjectedCAC, RevisedCACMonthend, ProjectedOverUnder, ValueAdjustment, ValueAdjustmentPercentage, RevisedCAC, RevisedOverUnder, RevisedPerformanceFactor, Selected, MonthendCAC, MonthendValueAdjustment, ActualCostPlusCommitment, UpdateMonthendValueAdjustment, BudgetLaborUnit, ActualLaborUnit FROM dbo.tblJobCostCodePhase";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AtefDataSet13.tblJobCostCodePhaseDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AtefDataSet13.tblJobCostCodePhaseDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AtefDataSet13.tblJobCostCodePhaseDataTable dataTable = new AtefDataSet13.tblJobCostCodePhaseDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AtefDataSet13.tblJobCostCodePhaseDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AtefDataSet13 dataSet) {
            return this.Adapter.Update(dataSet, "tblJobCostCodePhase");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_JobCostCodePhaseID, 
                    global::System.Nullable<int> Original_JobID, 
                    string Original_JobCostCodeType, 
                    string Original_JobCostCodePhase, 
                    string Original_CostCode, 
                    string Original_CostCodeTitle, 
                    string Original_CostCodeDescription, 
                    string Original_UserDescription, 
                    string Original_Unit, 
                    global::System.Nullable<int> Original_OriginalContractHours, 
                    global::System.Nullable<int> Original_OriginalContractQuantity, 
                    global::System.Nullable<double> Original_OriginalContractCost, 
                    global::System.Nullable<int> Original_ApprovedChangeOrderHours, 
                    global::System.Nullable<int> Original_ApprovedChangeOrderQuantity, 
                    global::System.Nullable<double> Original_ApprovedChangeOrderCost, 
                    global::System.Nullable<int> Original_PendingWithProceedHours, 
                    global::System.Nullable<int> Original_PendingWithProceedQuantity, 
                    global::System.Nullable<double> Original_PendingWithProceedCost, 
                    global::System.Nullable<int> Original_PendingNoProceedHours, 
                    global::System.Nullable<int> Original_PendingNoProceedQuantity, 
                    global::System.Nullable<double> Original_PendingNoProceedCost, 
                    global::System.Nullable<int> Original_QuantityAdjustment, 
                    global::System.Nullable<int> Original_TotalBudgetHours, 
                    global::System.Nullable<int> Original_TotalBudgetQuantity, 
                    global::System.Nullable<double> Original_TotalBudgetCost, 
                    global::System.Nullable<int> Original_CommittedHours, 
                    global::System.Nullable<int> Original_CommittedQuantity, 
                    global::System.Nullable<double> Original_Cost, 
                    global::System.Nullable<double> Original_OpenCommitment, 
                    global::System.Nullable<double> Original_UsedHoursPercentage, 
                    global::System.Nullable<double> Original_UsedQuantityPercentage, 
                    global::System.Nullable<double> Original_EstimatedPerformanceFactor, 
                    global::System.Nullable<double> Original_DifferentialHours, 
                    global::System.Nullable<double> Original_CurrentPerformanceHours, 
                    global::System.Nullable<double> Original_ProjectedTotalHours, 
                    global::System.Nullable<double> Original_ProjectedCAC, 
                    global::System.Nullable<double> Original_RevisedCACMonthend, 
                    global::System.Nullable<double> Original_ProjectedOverUnder, 
                    global::System.Nullable<double> Original_ValueAdjustment, 
                    global::System.Nullable<double> Original_ValueAdjustmentPercentage, 
                    global::System.Nullable<double> Original_RevisedCAC, 
                    global::System.Nullable<double> Original_RevisedOverUnder, 
                    global::System.Nullable<double> Original_RevisedPerformanceFactor, 
                    global::System.Nullable<bool> Original_Selected, 
                    global::System.Nullable<double> Original_MonthendCAC, 
                    global::System.Nullable<double> Original_MonthendValueAdjustment, 
                    global::System.Nullable<double> Original_ActualCostPlusCommitment, 
                    global::System.Nullable<bool> Original_UpdateMonthendValueAdjustment, 
                    global::System.Nullable<double> Original_BudgetLaborUnit, 
                    global::System.Nullable<double> Original_ActualLaborUnit) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_JobCostCodePhaseID));
            if ((Original_JobID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_JobID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_JobCostCodeType == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_JobCostCodeType));
            }
            if ((Original_JobCostCodePhase == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_JobCostCodePhase));
            }
            if ((Original_CostCode == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_CostCode));
            }
            if ((Original_CostCodeTitle == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_CostCodeTitle));
            }
            if ((Original_CostCodeDescription == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_CostCodeDescription));
            }
            if ((Original_UserDescription == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_UserDescription));
            }
            if ((Original_Unit == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_Unit));
            }
            if ((Original_OriginalContractHours.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_OriginalContractHours.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_OriginalContractQuantity.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_OriginalContractQuantity.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_OriginalContractCost.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((double)(Original_OriginalContractCost.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedChangeOrderHours.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(Original_ApprovedChangeOrderHours.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedChangeOrderQuantity.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((int)(Original_ApprovedChangeOrderQuantity.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedChangeOrderCost.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((double)(Original_ApprovedChangeOrderCost.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_PendingWithProceedHours.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((int)(Original_PendingWithProceedHours.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_PendingWithProceedQuantity.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((int)(Original_PendingWithProceedQuantity.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_PendingWithProceedCost.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((double)(Original_PendingWithProceedCost.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_PendingNoProceedHours.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((int)(Original_PendingNoProceedHours.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_PendingNoProceedQuantity.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((int)(Original_PendingNoProceedQuantity.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_PendingNoProceedCost.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((double)(Original_PendingNoProceedCost.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_QuantityAdjustment.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((int)(Original_QuantityAdjustment.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_TotalBudgetHours.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((int)(Original_TotalBudgetHours.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_TotalBudgetQuantity.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((int)(Original_TotalBudgetQuantity.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_TotalBudgetCost.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((double)(Original_TotalBudgetCost.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_CommittedHours.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((int)(Original_CommittedHours.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_CommittedQuantity.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((int)(Original_CommittedQuantity.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_Cost.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((double)(Original_Cost.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_OpenCommitment.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((double)(Original_OpenCommitment.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_UsedHoursPercentage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((double)(Original_UsedHoursPercentage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_UsedQuantityPercentage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((double)(Original_UsedQuantityPercentage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_EstimatedPerformanceFactor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((double)(Original_EstimatedPerformanceFactor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_DifferentialHours.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((double)(Original_DifferentialHours.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_CurrentPerformanceHours.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((double)(Original_CurrentPerformanceHours.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_ProjectedTotalHours.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[68].Value = ((double)(Original_ProjectedTotalHours.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_ProjectedCAC.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[70].Value = ((double)(Original_ProjectedCAC.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_RevisedCACMonthend.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[72].Value = ((double)(Original_RevisedCACMonthend.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_ProjectedOverUnder.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[74].Value = ((double)(Original_ProjectedOverUnder.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_ValueAdjustment.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[76].Value = ((double)(Original_ValueAdjustment.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_ValueAdjustmentPercentage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[78].Value = ((double)(Original_ValueAdjustmentPercentage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((Original_RevisedCAC.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[80].Value = ((double)(Original_RevisedCAC.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((Original_RevisedOverUnder.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[82].Value = ((double)(Original_RevisedOverUnder.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((Original_RevisedPerformanceFactor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[84].Value = ((double)(Original_RevisedPerformanceFactor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            if ((Original_Selected.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[86].Value = ((bool)(Original_Selected.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            if ((Original_MonthendCAC.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[88].Value = ((double)(Original_MonthendCAC.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            if ((Original_MonthendValueAdjustment.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[90].Value = ((double)(Original_MonthendValueAdjustment.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualCostPlusCommitment.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[91].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[92].Value = ((double)(Original_ActualCostPlusCommitment.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[91].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            if ((Original_UpdateMonthendValueAdjustment.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[94].Value = ((bool)(Original_UpdateMonthendValueAdjustment.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            if ((Original_BudgetLaborUnit.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[96].Value = ((double)(Original_BudgetLaborUnit.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualLaborUnit.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[97].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[98].Value = ((double)(Original_ActualLaborUnit.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[97].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[98].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> JobID, 
                    string JobCostCodeType, 
                    string JobCostCodePhase, 
                    string CostCode, 
                    string CostCodeTitle, 
                    string CostCodeDescription, 
                    string UserDescription, 
                    string Unit, 
                    global::System.Nullable<int> OriginalContractHours, 
                    global::System.Nullable<int> OriginalContractQuantity, 
                    global::System.Nullable<double> OriginalContractCost, 
                    global::System.Nullable<int> ApprovedChangeOrderHours, 
                    global::System.Nullable<int> ApprovedChangeOrderQuantity, 
                    global::System.Nullable<double> ApprovedChangeOrderCost, 
                    global::System.Nullable<int> PendingWithProceedHours, 
                    global::System.Nullable<int> PendingWithProceedQuantity, 
                    global::System.Nullable<double> PendingWithProceedCost, 
                    global::System.Nullable<int> PendingNoProceedHours, 
                    global::System.Nullable<int> PendingNoProceedQuantity, 
                    global::System.Nullable<double> PendingNoProceedCost, 
                    global::System.Nullable<int> QuantityAdjustment, 
                    global::System.Nullable<int> TotalBudgetHours, 
                    global::System.Nullable<int> TotalBudgetQuantity, 
                    global::System.Nullable<double> TotalBudgetCost, 
                    global::System.Nullable<int> CommittedHours, 
                    global::System.Nullable<int> CommittedQuantity, 
                    global::System.Nullable<double> Cost, 
                    global::System.Nullable<double> OpenCommitment, 
                    global::System.Nullable<double> UsedHoursPercentage, 
                    global::System.Nullable<double> UsedQuantityPercentage, 
                    global::System.Nullable<double> EstimatedPerformanceFactor, 
                    global::System.Nullable<double> DifferentialHours, 
                    global::System.Nullable<double> CurrentPerformanceHours, 
                    global::System.Nullable<double> ProjectedTotalHours, 
                    global::System.Nullable<double> ProjectedCAC, 
                    global::System.Nullable<double> RevisedCACMonthend, 
                    global::System.Nullable<double> ProjectedOverUnder, 
                    global::System.Nullable<double> ValueAdjustment, 
                    global::System.Nullable<double> ValueAdjustmentPercentage, 
                    global::System.Nullable<double> RevisedCAC, 
                    global::System.Nullable<double> RevisedOverUnder, 
                    global::System.Nullable<double> RevisedPerformanceFactor, 
                    global::System.Nullable<bool> Selected, 
                    global::System.Nullable<double> MonthendCAC, 
                    global::System.Nullable<double> MonthendValueAdjustment, 
                    global::System.Nullable<double> ActualCostPlusCommitment, 
                    global::System.Nullable<bool> UpdateMonthendValueAdjustment, 
                    global::System.Nullable<double> BudgetLaborUnit, 
                    global::System.Nullable<double> ActualLaborUnit) {
            if ((JobID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(JobID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((JobCostCodeType == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(JobCostCodeType));
            }
            if ((JobCostCodePhase == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(JobCostCodePhase));
            }
            if ((CostCode == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CostCode));
            }
            if ((CostCodeTitle == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CostCodeTitle));
            }
            if ((CostCodeDescription == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CostCodeDescription));
            }
            if ((UserDescription == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(UserDescription));
            }
            if ((Unit == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Unit));
            }
            if ((OriginalContractHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(OriginalContractHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((OriginalContractQuantity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(OriginalContractQuantity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((OriginalContractCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(OriginalContractCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((ApprovedChangeOrderHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(ApprovedChangeOrderHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ApprovedChangeOrderQuantity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(ApprovedChangeOrderQuantity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((ApprovedChangeOrderCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(ApprovedChangeOrderCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((PendingWithProceedHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(PendingWithProceedHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((PendingWithProceedQuantity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((int)(PendingWithProceedQuantity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((PendingWithProceedCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(PendingWithProceedCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((PendingNoProceedHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((int)(PendingNoProceedHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((PendingNoProceedQuantity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((int)(PendingNoProceedQuantity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((PendingNoProceedCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((double)(PendingNoProceedCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((QuantityAdjustment.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((int)(QuantityAdjustment.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((TotalBudgetHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((int)(TotalBudgetHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((TotalBudgetQuantity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((int)(TotalBudgetQuantity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((TotalBudgetCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((double)(TotalBudgetCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((CommittedHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((int)(CommittedHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((CommittedQuantity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((int)(CommittedQuantity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Cost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((double)(Cost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((OpenCommitment.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((double)(OpenCommitment.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((UsedHoursPercentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((double)(UsedHoursPercentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((UsedQuantityPercentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((double)(UsedQuantityPercentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((EstimatedPerformanceFactor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((double)(EstimatedPerformanceFactor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((DifferentialHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((double)(DifferentialHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((CurrentPerformanceHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((double)(CurrentPerformanceHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((ProjectedTotalHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((double)(ProjectedTotalHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((ProjectedCAC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((double)(ProjectedCAC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((RevisedCACMonthend.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((double)(RevisedCACMonthend.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((ProjectedOverUnder.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((double)(ProjectedOverUnder.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((ValueAdjustment.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[37].Value = ((double)(ValueAdjustment.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((ValueAdjustmentPercentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((double)(ValueAdjustmentPercentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((RevisedCAC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((double)(RevisedCAC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((RevisedOverUnder.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((double)(RevisedOverUnder.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((RevisedPerformanceFactor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[41].Value = ((double)(RevisedPerformanceFactor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Selected.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[42].Value = ((bool)(Selected.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((MonthendCAC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[43].Value = ((double)(MonthendCAC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((MonthendValueAdjustment.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[44].Value = ((double)(MonthendValueAdjustment.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((ActualCostPlusCommitment.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[45].Value = ((double)(ActualCostPlusCommitment.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((UpdateMonthendValueAdjustment.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[46].Value = ((bool)(UpdateMonthendValueAdjustment.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((BudgetLaborUnit.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[47].Value = ((double)(BudgetLaborUnit.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((ActualLaborUnit.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[48].Value = ((double)(ActualLaborUnit.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> JobID, 
                    string JobCostCodeType, 
                    string JobCostCodePhase, 
                    string CostCode, 
                    string CostCodeTitle, 
                    string CostCodeDescription, 
                    string UserDescription, 
                    string Unit, 
                    global::System.Nullable<int> OriginalContractHours, 
                    global::System.Nullable<int> OriginalContractQuantity, 
                    global::System.Nullable<double> OriginalContractCost, 
                    global::System.Nullable<int> ApprovedChangeOrderHours, 
                    global::System.Nullable<int> ApprovedChangeOrderQuantity, 
                    global::System.Nullable<double> ApprovedChangeOrderCost, 
                    global::System.Nullable<int> PendingWithProceedHours, 
                    global::System.Nullable<int> PendingWithProceedQuantity, 
                    global::System.Nullable<double> PendingWithProceedCost, 
                    global::System.Nullable<int> PendingNoProceedHours, 
                    global::System.Nullable<int> PendingNoProceedQuantity, 
                    global::System.Nullable<double> PendingNoProceedCost, 
                    global::System.Nullable<int> QuantityAdjustment, 
                    global::System.Nullable<int> TotalBudgetHours, 
                    global::System.Nullable<int> TotalBudgetQuantity, 
                    global::System.Nullable<double> TotalBudgetCost, 
                    global::System.Nullable<int> CommittedHours, 
                    global::System.Nullable<int> CommittedQuantity, 
                    global::System.Nullable<double> Cost, 
                    global::System.Nullable<double> OpenCommitment, 
                    global::System.Nullable<double> UsedHoursPercentage, 
                    global::System.Nullable<double> UsedQuantityPercentage, 
                    global::System.Nullable<double> EstimatedPerformanceFactor, 
                    global::System.Nullable<double> DifferentialHours, 
                    global::System.Nullable<double> CurrentPerformanceHours, 
                    global::System.Nullable<double> ProjectedTotalHours, 
                    global::System.Nullable<double> ProjectedCAC, 
                    global::System.Nullable<double> RevisedCACMonthend, 
                    global::System.Nullable<double> ProjectedOverUnder, 
                    global::System.Nullable<double> ValueAdjustment, 
                    global::System.Nullable<double> ValueAdjustmentPercentage, 
                    global::System.Nullable<double> RevisedCAC, 
                    global::System.Nullable<double> RevisedOverUnder, 
                    global::System.Nullable<double> RevisedPerformanceFactor, 
                    global::System.Nullable<bool> Selected, 
                    global::System.Nullable<double> MonthendCAC, 
                    global::System.Nullable<double> MonthendValueAdjustment, 
                    global::System.Nullable<double> ActualCostPlusCommitment, 
                    global::System.Nullable<bool> UpdateMonthendValueAdjustment, 
                    global::System.Nullable<double> BudgetLaborUnit, 
                    global::System.Nullable<double> ActualLaborUnit, 
                    int Original_JobCostCodePhaseID, 
                    global::System.Nullable<int> Original_JobID, 
                    string Original_JobCostCodeType, 
                    string Original_JobCostCodePhase, 
                    string Original_CostCode, 
                    string Original_CostCodeTitle, 
                    string Original_CostCodeDescription, 
                    string Original_UserDescription, 
                    string Original_Unit, 
                    global::System.Nullable<int> Original_OriginalContractHours, 
                    global::System.Nullable<int> Original_OriginalContractQuantity, 
                    global::System.Nullable<double> Original_OriginalContractCost, 
                    global::System.Nullable<int> Original_ApprovedChangeOrderHours, 
                    global::System.Nullable<int> Original_ApprovedChangeOrderQuantity, 
                    global::System.Nullable<double> Original_ApprovedChangeOrderCost, 
                    global::System.Nullable<int> Original_PendingWithProceedHours, 
                    global::System.Nullable<int> Original_PendingWithProceedQuantity, 
                    global::System.Nullable<double> Original_PendingWithProceedCost, 
                    global::System.Nullable<int> Original_PendingNoProceedHours, 
                    global::System.Nullable<int> Original_PendingNoProceedQuantity, 
                    global::System.Nullable<double> Original_PendingNoProceedCost, 
                    global::System.Nullable<int> Original_QuantityAdjustment, 
                    global::System.Nullable<int> Original_TotalBudgetHours, 
                    global::System.Nullable<int> Original_TotalBudgetQuantity, 
                    global::System.Nullable<double> Original_TotalBudgetCost, 
                    global::System.Nullable<int> Original_CommittedHours, 
                    global::System.Nullable<int> Original_CommittedQuantity, 
                    global::System.Nullable<double> Original_Cost, 
                    global::System.Nullable<double> Original_OpenCommitment, 
                    global::System.Nullable<double> Original_UsedHoursPercentage, 
                    global::System.Nullable<double> Original_UsedQuantityPercentage, 
                    global::System.Nullable<double> Original_EstimatedPerformanceFactor, 
                    global::System.Nullable<double> Original_DifferentialHours, 
                    global::System.Nullable<double> Original_CurrentPerformanceHours, 
                    global::System.Nullable<double> Original_ProjectedTotalHours, 
                    global::System.Nullable<double> Original_ProjectedCAC, 
                    global::System.Nullable<double> Original_RevisedCACMonthend, 
                    global::System.Nullable<double> Original_ProjectedOverUnder, 
                    global::System.Nullable<double> Original_ValueAdjustment, 
                    global::System.Nullable<double> Original_ValueAdjustmentPercentage, 
                    global::System.Nullable<double> Original_RevisedCAC, 
                    global::System.Nullable<double> Original_RevisedOverUnder, 
                    global::System.Nullable<double> Original_RevisedPerformanceFactor, 
                    global::System.Nullable<bool> Original_Selected, 
                    global::System.Nullable<double> Original_MonthendCAC, 
                    global::System.Nullable<double> Original_MonthendValueAdjustment, 
                    global::System.Nullable<double> Original_ActualCostPlusCommitment, 
                    global::System.Nullable<bool> Original_UpdateMonthendValueAdjustment, 
                    global::System.Nullable<double> Original_BudgetLaborUnit, 
                    global::System.Nullable<double> Original_ActualLaborUnit, 
                    int JobCostCodePhaseID) {
            if ((JobID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(JobID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((JobCostCodeType == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(JobCostCodeType));
            }
            if ((JobCostCodePhase == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(JobCostCodePhase));
            }
            if ((CostCode == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CostCode));
            }
            if ((CostCodeTitle == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CostCodeTitle));
            }
            if ((CostCodeDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(CostCodeDescription));
            }
            if ((UserDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(UserDescription));
            }
            if ((Unit == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Unit));
            }
            if ((OriginalContractHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(OriginalContractHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((OriginalContractQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(OriginalContractQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((OriginalContractCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(OriginalContractCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((ApprovedChangeOrderHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(ApprovedChangeOrderHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ApprovedChangeOrderQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(ApprovedChangeOrderQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((ApprovedChangeOrderCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(ApprovedChangeOrderCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((PendingWithProceedHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(PendingWithProceedHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((PendingWithProceedQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(PendingWithProceedQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((PendingWithProceedCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(PendingWithProceedCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((PendingNoProceedHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(PendingNoProceedHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((PendingNoProceedQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(PendingNoProceedQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((PendingNoProceedCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(PendingNoProceedCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((QuantityAdjustment.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(QuantityAdjustment.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((TotalBudgetHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(TotalBudgetHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((TotalBudgetQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(TotalBudgetQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((TotalBudgetCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(TotalBudgetCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((CommittedHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(CommittedHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((CommittedQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(CommittedQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Cost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((double)(Cost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((OpenCommitment.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((double)(OpenCommitment.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((UsedHoursPercentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((double)(UsedHoursPercentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((UsedQuantityPercentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((double)(UsedQuantityPercentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((EstimatedPerformanceFactor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((double)(EstimatedPerformanceFactor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((DifferentialHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((double)(DifferentialHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((CurrentPerformanceHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((double)(CurrentPerformanceHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((ProjectedTotalHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((double)(ProjectedTotalHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((ProjectedCAC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((double)(ProjectedCAC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((RevisedCACMonthend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((double)(RevisedCACMonthend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((ProjectedOverUnder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((double)(ProjectedOverUnder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((ValueAdjustment.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((double)(ValueAdjustment.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((ValueAdjustmentPercentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((double)(ValueAdjustmentPercentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((RevisedCAC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((double)(RevisedCAC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((RevisedOverUnder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((double)(RevisedOverUnder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((RevisedPerformanceFactor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((double)(RevisedPerformanceFactor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Selected.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((bool)(Selected.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((MonthendCAC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((double)(MonthendCAC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((MonthendValueAdjustment.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((double)(MonthendValueAdjustment.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((ActualCostPlusCommitment.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((double)(ActualCostPlusCommitment.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((UpdateMonthendValueAdjustment.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((bool)(UpdateMonthendValueAdjustment.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((BudgetLaborUnit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((double)(BudgetLaborUnit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((ActualLaborUnit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((double)(ActualLaborUnit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[49].Value = ((int)(Original_JobCostCodePhaseID));
            if ((Original_JobID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((int)(Original_JobID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((Original_JobCostCodeType == null)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((string)(Original_JobCostCodeType));
            }
            if ((Original_JobCostCodePhase == null)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_JobCostCodePhase));
            }
            if ((Original_CostCode == null)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((string)(Original_CostCode));
            }
            if ((Original_CostCodeTitle == null)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((string)(Original_CostCodeTitle));
            }
            if ((Original_CostCodeDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Original_CostCodeDescription));
            }
            if ((Original_UserDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((string)(Original_UserDescription));
            }
            if ((Original_Unit == null)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((string)(Original_Unit));
            }
            if ((Original_OriginalContractHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((int)(Original_OriginalContractHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((Original_OriginalContractQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((int)(Original_OriginalContractQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((Original_OriginalContractCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((double)(Original_OriginalContractCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedChangeOrderHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((int)(Original_ApprovedChangeOrderHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedChangeOrderQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((int)(Original_ApprovedChangeOrderQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            if ((Original_ApprovedChangeOrderCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((double)(Original_ApprovedChangeOrderCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((Original_PendingWithProceedHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((int)(Original_PendingWithProceedHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((Original_PendingWithProceedQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((int)(Original_PendingWithProceedQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            if ((Original_PendingWithProceedCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((double)(Original_PendingWithProceedCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((Original_PendingNoProceedHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((int)(Original_PendingNoProceedHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((Original_PendingNoProceedQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[87].Value = ((int)(Original_PendingNoProceedQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            if ((Original_PendingNoProceedCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((double)(Original_PendingNoProceedCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            if ((Original_QuantityAdjustment.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[91].Value = ((int)(Original_QuantityAdjustment.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            if ((Original_TotalBudgetHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[93].Value = ((int)(Original_TotalBudgetHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            if ((Original_TotalBudgetQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[95].Value = ((int)(Original_TotalBudgetQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            if ((Original_TotalBudgetCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[97].Value = ((double)(Original_TotalBudgetCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[97].Value = global::System.DBNull.Value;
            }
            if ((Original_CommittedHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[99].Value = ((int)(Original_CommittedHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[99].Value = global::System.DBNull.Value;
            }
            if ((Original_CommittedQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[101].Value = ((int)(Original_CommittedQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[101].Value = global::System.DBNull.Value;
            }
            if ((Original_Cost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[103].Value = ((double)(Original_Cost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[103].Value = global::System.DBNull.Value;
            }
            if ((Original_OpenCommitment.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[104].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[105].Value = ((double)(Original_OpenCommitment.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[104].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[105].Value = global::System.DBNull.Value;
            }
            if ((Original_UsedHoursPercentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[106].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[107].Value = ((double)(Original_UsedHoursPercentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[106].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[107].Value = global::System.DBNull.Value;
            }
            if ((Original_UsedQuantityPercentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[108].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[109].Value = ((double)(Original_UsedQuantityPercentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[108].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[109].Value = global::System.DBNull.Value;
            }
            if ((Original_EstimatedPerformanceFactor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[110].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[111].Value = ((double)(Original_EstimatedPerformanceFactor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[110].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[111].Value = global::System.DBNull.Value;
            }
            if ((Original_DifferentialHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[113].Value = ((double)(Original_DifferentialHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[113].Value = global::System.DBNull.Value;
            }
            if ((Original_CurrentPerformanceHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[114].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[115].Value = ((double)(Original_CurrentPerformanceHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[114].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[115].Value = global::System.DBNull.Value;
            }
            if ((Original_ProjectedTotalHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[116].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[117].Value = ((double)(Original_ProjectedTotalHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[116].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[117].Value = global::System.DBNull.Value;
            }
            if ((Original_ProjectedCAC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[118].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[119].Value = ((double)(Original_ProjectedCAC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[118].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[119].Value = global::System.DBNull.Value;
            }
            if ((Original_RevisedCACMonthend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[120].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[121].Value = ((double)(Original_RevisedCACMonthend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[120].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[121].Value = global::System.DBNull.Value;
            }
            if ((Original_ProjectedOverUnder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[122].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[123].Value = ((double)(Original_ProjectedOverUnder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[122].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[123].Value = global::System.DBNull.Value;
            }
            if ((Original_ValueAdjustment.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[124].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[125].Value = ((double)(Original_ValueAdjustment.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[124].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[125].Value = global::System.DBNull.Value;
            }
            if ((Original_ValueAdjustmentPercentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[126].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[127].Value = ((double)(Original_ValueAdjustmentPercentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[126].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[127].Value = global::System.DBNull.Value;
            }
            if ((Original_RevisedCAC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[128].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[129].Value = ((double)(Original_RevisedCAC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[128].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[129].Value = global::System.DBNull.Value;
            }
            if ((Original_RevisedOverUnder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[130].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[131].Value = ((double)(Original_RevisedOverUnder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[130].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[131].Value = global::System.DBNull.Value;
            }
            if ((Original_RevisedPerformanceFactor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[132].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[133].Value = ((double)(Original_RevisedPerformanceFactor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[132].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[133].Value = global::System.DBNull.Value;
            }
            if ((Original_Selected.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[134].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[135].Value = ((bool)(Original_Selected.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[134].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[135].Value = global::System.DBNull.Value;
            }
            if ((Original_MonthendCAC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[136].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[137].Value = ((double)(Original_MonthendCAC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[136].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[137].Value = global::System.DBNull.Value;
            }
            if ((Original_MonthendValueAdjustment.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[138].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[139].Value = ((double)(Original_MonthendValueAdjustment.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[138].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[139].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualCostPlusCommitment.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[140].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[141].Value = ((double)(Original_ActualCostPlusCommitment.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[140].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[141].Value = global::System.DBNull.Value;
            }
            if ((Original_UpdateMonthendValueAdjustment.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[142].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[143].Value = ((bool)(Original_UpdateMonthendValueAdjustment.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[142].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[143].Value = global::System.DBNull.Value;
            }
            if ((Original_BudgetLaborUnit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[144].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[145].Value = ((double)(Original_BudgetLaborUnit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[144].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[145].Value = global::System.DBNull.Value;
            }
            if ((Original_ActualLaborUnit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[146].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[147].Value = ((double)(Original_ActualLaborUnit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[146].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[147].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[148].Value = ((int)(JobCostCodePhaseID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> JobID, 
                    string JobCostCodeType, 
                    string JobCostCodePhase, 
                    string CostCode, 
                    string CostCodeTitle, 
                    string CostCodeDescription, 
                    string UserDescription, 
                    string Unit, 
                    global::System.Nullable<int> OriginalContractHours, 
                    global::System.Nullable<int> OriginalContractQuantity, 
                    global::System.Nullable<double> OriginalContractCost, 
                    global::System.Nullable<int> ApprovedChangeOrderHours, 
                    global::System.Nullable<int> ApprovedChangeOrderQuantity, 
                    global::System.Nullable<double> ApprovedChangeOrderCost, 
                    global::System.Nullable<int> PendingWithProceedHours, 
                    global::System.Nullable<int> PendingWithProceedQuantity, 
                    global::System.Nullable<double> PendingWithProceedCost, 
                    global::System.Nullable<int> PendingNoProceedHours, 
                    global::System.Nullable<int> PendingNoProceedQuantity, 
                    global::System.Nullable<double> PendingNoProceedCost, 
                    global::System.Nullable<int> QuantityAdjustment, 
                    global::System.Nullable<int> TotalBudgetHours, 
                    global::System.Nullable<int> TotalBudgetQuantity, 
                    global::System.Nullable<double> TotalBudgetCost, 
                    global::System.Nullable<int> CommittedHours, 
                    global::System.Nullable<int> CommittedQuantity, 
                    global::System.Nullable<double> Cost, 
                    global::System.Nullable<double> OpenCommitment, 
                    global::System.Nullable<double> UsedHoursPercentage, 
                    global::System.Nullable<double> UsedQuantityPercentage, 
                    global::System.Nullable<double> EstimatedPerformanceFactor, 
                    global::System.Nullable<double> DifferentialHours, 
                    global::System.Nullable<double> CurrentPerformanceHours, 
                    global::System.Nullable<double> ProjectedTotalHours, 
                    global::System.Nullable<double> ProjectedCAC, 
                    global::System.Nullable<double> RevisedCACMonthend, 
                    global::System.Nullable<double> ProjectedOverUnder, 
                    global::System.Nullable<double> ValueAdjustment, 
                    global::System.Nullable<double> ValueAdjustmentPercentage, 
                    global::System.Nullable<double> RevisedCAC, 
                    global::System.Nullable<double> RevisedOverUnder, 
                    global::System.Nullable<double> RevisedPerformanceFactor, 
                    global::System.Nullable<bool> Selected, 
                    global::System.Nullable<double> MonthendCAC, 
                    global::System.Nullable<double> MonthendValueAdjustment, 
                    global::System.Nullable<double> ActualCostPlusCommitment, 
                    global::System.Nullable<bool> UpdateMonthendValueAdjustment, 
                    global::System.Nullable<double> BudgetLaborUnit, 
                    global::System.Nullable<double> ActualLaborUnit, 
                    int Original_JobCostCodePhaseID, 
                    global::System.Nullable<int> Original_JobID, 
                    string Original_JobCostCodeType, 
                    string Original_JobCostCodePhase, 
                    string Original_CostCode, 
                    string Original_CostCodeTitle, 
                    string Original_CostCodeDescription, 
                    string Original_UserDescription, 
                    string Original_Unit, 
                    global::System.Nullable<int> Original_OriginalContractHours, 
                    global::System.Nullable<int> Original_OriginalContractQuantity, 
                    global::System.Nullable<double> Original_OriginalContractCost, 
                    global::System.Nullable<int> Original_ApprovedChangeOrderHours, 
                    global::System.Nullable<int> Original_ApprovedChangeOrderQuantity, 
                    global::System.Nullable<double> Original_ApprovedChangeOrderCost, 
                    global::System.Nullable<int> Original_PendingWithProceedHours, 
                    global::System.Nullable<int> Original_PendingWithProceedQuantity, 
                    global::System.Nullable<double> Original_PendingWithProceedCost, 
                    global::System.Nullable<int> Original_PendingNoProceedHours, 
                    global::System.Nullable<int> Original_PendingNoProceedQuantity, 
                    global::System.Nullable<double> Original_PendingNoProceedCost, 
                    global::System.Nullable<int> Original_QuantityAdjustment, 
                    global::System.Nullable<int> Original_TotalBudgetHours, 
                    global::System.Nullable<int> Original_TotalBudgetQuantity, 
                    global::System.Nullable<double> Original_TotalBudgetCost, 
                    global::System.Nullable<int> Original_CommittedHours, 
                    global::System.Nullable<int> Original_CommittedQuantity, 
                    global::System.Nullable<double> Original_Cost, 
                    global::System.Nullable<double> Original_OpenCommitment, 
                    global::System.Nullable<double> Original_UsedHoursPercentage, 
                    global::System.Nullable<double> Original_UsedQuantityPercentage, 
                    global::System.Nullable<double> Original_EstimatedPerformanceFactor, 
                    global::System.Nullable<double> Original_DifferentialHours, 
                    global::System.Nullable<double> Original_CurrentPerformanceHours, 
                    global::System.Nullable<double> Original_ProjectedTotalHours, 
                    global::System.Nullable<double> Original_ProjectedCAC, 
                    global::System.Nullable<double> Original_RevisedCACMonthend, 
                    global::System.Nullable<double> Original_ProjectedOverUnder, 
                    global::System.Nullable<double> Original_ValueAdjustment, 
                    global::System.Nullable<double> Original_ValueAdjustmentPercentage, 
                    global::System.Nullable<double> Original_RevisedCAC, 
                    global::System.Nullable<double> Original_RevisedOverUnder, 
                    global::System.Nullable<double> Original_RevisedPerformanceFactor, 
                    global::System.Nullable<bool> Original_Selected, 
                    global::System.Nullable<double> Original_MonthendCAC, 
                    global::System.Nullable<double> Original_MonthendValueAdjustment, 
                    global::System.Nullable<double> Original_ActualCostPlusCommitment, 
                    global::System.Nullable<bool> Original_UpdateMonthendValueAdjustment, 
                    global::System.Nullable<double> Original_BudgetLaborUnit, 
                    global::System.Nullable<double> Original_ActualLaborUnit) {
            return this.Update(JobID, JobCostCodeType, JobCostCodePhase, CostCode, CostCodeTitle, CostCodeDescription, UserDescription, Unit, OriginalContractHours, OriginalContractQuantity, OriginalContractCost, ApprovedChangeOrderHours, ApprovedChangeOrderQuantity, ApprovedChangeOrderCost, PendingWithProceedHours, PendingWithProceedQuantity, PendingWithProceedCost, PendingNoProceedHours, PendingNoProceedQuantity, PendingNoProceedCost, QuantityAdjustment, TotalBudgetHours, TotalBudgetQuantity, TotalBudgetCost, CommittedHours, CommittedQuantity, Cost, OpenCommitment, UsedHoursPercentage, UsedQuantityPercentage, EstimatedPerformanceFactor, DifferentialHours, CurrentPerformanceHours, ProjectedTotalHours, ProjectedCAC, RevisedCACMonthend, ProjectedOverUnder, ValueAdjustment, ValueAdjustmentPercentage, RevisedCAC, RevisedOverUnder, RevisedPerformanceFactor, Selected, MonthendCAC, MonthendValueAdjustment, ActualCostPlusCommitment, UpdateMonthendValueAdjustment, BudgetLaborUnit, ActualLaborUnit, Original_JobCostCodePhaseID, Original_JobID, Original_JobCostCodeType, Original_JobCostCodePhase, Original_CostCode, Original_CostCodeTitle, Original_CostCodeDescription, Original_UserDescription, Original_Unit, Original_OriginalContractHours, Original_OriginalContractQuantity, Original_OriginalContractCost, Original_ApprovedChangeOrderHours, Original_ApprovedChangeOrderQuantity, Original_ApprovedChangeOrderCost, Original_PendingWithProceedHours, Original_PendingWithProceedQuantity, Original_PendingWithProceedCost, Original_PendingNoProceedHours, Original_PendingNoProceedQuantity, Original_PendingNoProceedCost, Original_QuantityAdjustment, Original_TotalBudgetHours, Original_TotalBudgetQuantity, Original_TotalBudgetCost, Original_CommittedHours, Original_CommittedQuantity, Original_Cost, Original_OpenCommitment, Original_UsedHoursPercentage, Original_UsedQuantityPercentage, Original_EstimatedPerformanceFactor, Original_DifferentialHours, Original_CurrentPerformanceHours, Original_ProjectedTotalHours, Original_ProjectedCAC, Original_RevisedCACMonthend, Original_ProjectedOverUnder, Original_ValueAdjustment, Original_ValueAdjustmentPercentage, Original_RevisedCAC, Original_RevisedOverUnder, Original_RevisedPerformanceFactor, Original_Selected, Original_MonthendCAC, Original_MonthendValueAdjustment, Original_ActualCostPlusCommitment, Original_UpdateMonthendValueAdjustment, Original_BudgetLaborUnit, Original_ActualLaborUnit, Original_JobCostCodePhaseID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DataTable1TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataTable1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DataTable1";
            tableMapping.ColumnMappings.Add("QuantityToDate", "QuantityToDate");
            tableMapping.ColumnMappings.Add("HoursToDate", "HoursToDate");
            tableMapping.ColumnMappings.Add("Earned", "Earned");
            tableMapping.ColumnMappings.Add("LaborPerformanceFactor", "LaborPerformanceFactor");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("Hours", "Hours");
            tableMapping.ColumnMappings.Add("Weekend", "Weekend");
            tableMapping.ColumnMappings.Add("JobCostCodePhaseID", "JobCostCodePhaseID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CCEJobs.Properties.Settings.Default.AtefConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT   f.JobCostCodePhaseID,  f.QuantityToDate, f.HoursToDate, Earned, LaborPerformanceFactor, Quantity, Hours, f.Weekend
FROm tblJobCostCodesWeeklyFeedback f
INNER JOIN tblJobCostCodesWeekly w 
ON f.JobCostCodePhaseID = w.JobCostCodePhaseID AND f.Weekend = w.Weekend
WHERE f.JobCostCodePhaseID = 0
Order by f.weekend desc 
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AtefDataSet13.DataTable1DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AtefDataSet13.DataTable1DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AtefDataSet13.DataTable1DataTable dataTable = new AtefDataSet13.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591