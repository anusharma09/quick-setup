//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CCEJobs {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AtefDataSet12")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AtefDataSet12 : global::System.Data.DataSet {
        
        private tblJobBalanceDataTable tabletblJobBalance;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AtefDataSet12() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AtefDataSet12(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblJobBalance"] != null)) {
                    base.Tables.Add(new tblJobBalanceDataTable(ds.Tables["tblJobBalance"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblJobBalanceDataTable tblJobBalance {
            get {
                return this.tabletblJobBalance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AtefDataSet12 cln = ((AtefDataSet12)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tblJobBalance"] != null)) {
                    base.Tables.Add(new tblJobBalanceDataTable(ds.Tables["tblJobBalance"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletblJobBalance = ((tblJobBalanceDataTable)(base.Tables["tblJobBalance"]));
            if ((initTable == true)) {
                if ((this.tabletblJobBalance != null)) {
                    this.tabletblJobBalance.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AtefDataSet12";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AtefDataSet12.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletblJobBalance = new tblJobBalanceDataTable();
            base.Tables.Add(this.tabletblJobBalance);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblJobBalance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AtefDataSet12 ds = new AtefDataSet12();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tblJobBalanceRowChangeEventHandler(object sender, tblJobBalanceRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblJobBalanceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnJobID;
            
            private global::System.Data.DataColumn columnOriginalContract;
            
            private global::System.Data.DataColumn columnApprovedCO;
            
            private global::System.Data.DataColumn columnPendingCO;
            
            private global::System.Data.DataColumn columnNotApprovedCO;
            
            private global::System.Data.DataColumn columnCurrentContract;
            
            private global::System.Data.DataColumn columnAmountBilled;
            
            private global::System.Data.DataColumn columnAmountPaid;
            
            private global::System.Data.DataColumn columnRetention;
            
            private global::System.Data.DataColumn columnCashCost;
            
            private global::System.Data.DataColumn columnBilledCost;
            
            private global::System.Data.DataColumn columnCurrentBudgetLaborHours;
            
            private global::System.Data.DataColumn columnCurrentBudgetLabor;
            
            private global::System.Data.DataColumn columnCurrentBudgetMaterial;
            
            private global::System.Data.DataColumn columnCurrentBudgetRental;
            
            private global::System.Data.DataColumn columnCurrentBudgetSubcontract;
            
            private global::System.Data.DataColumn columnCurrentBudgetDJC;
            
            private global::System.Data.DataColumn columnCurrentBudget;
            
            private global::System.Data.DataColumn columnCommittedCostToDateLaborHours;
            
            private global::System.Data.DataColumn columnCommittedCostToDateLabor;
            
            private global::System.Data.DataColumn columnCommittedCostToDateMaterial;
            
            private global::System.Data.DataColumn columnCommittedCostToDateRental;
            
            private global::System.Data.DataColumn columnCommittedCostToDateSubcontract;
            
            private global::System.Data.DataColumn columnCommittedCostToDateDJC;
            
            private global::System.Data.DataColumn columnCommittedCostToDateHours;
            
            private global::System.Data.DataColumn columnCommittedCostToDate;
            
            private global::System.Data.DataColumn columnCostToCompleteLaborHours;
            
            private global::System.Data.DataColumn columnCostToCompleteLabor;
            
            private global::System.Data.DataColumn columnCostToCompleteMaterial;
            
            private global::System.Data.DataColumn columnCostToCompleteRental;
            
            private global::System.Data.DataColumn columnCostToCompleteSubcontract;
            
            private global::System.Data.DataColumn columnCostToCompleteDJC;
            
            private global::System.Data.DataColumn columnCostToComplete;
            
            private global::System.Data.DataColumn columnCostToCommitLaborHours;
            
            private global::System.Data.DataColumn columnCostToCommitLabor;
            
            private global::System.Data.DataColumn columnCostToCommitMaterial;
            
            private global::System.Data.DataColumn columnCostToCommitRental;
            
            private global::System.Data.DataColumn columnCostToCommitSubcontract;
            
            private global::System.Data.DataColumn columnCostToCommitDJC;
            
            private global::System.Data.DataColumn columnCostToCommit;
            
            private global::System.Data.DataColumn columnProjectedProfit;
            
            private global::System.Data.DataColumn columnProjectedProfitPercentage;
            
            private global::System.Data.DataColumn columnProfitGainFade;
            
            private global::System.Data.DataColumn columnBaselineProfit;
            
            private global::System.Data.DataColumn columnBaselineProfitPercentage;
            
            private global::System.Data.DataColumn columnJobPerformanceFactor;
            
            private global::System.Data.DataColumn columnLaborCompletePercentage;
            
            private global::System.Data.DataColumn columnBilledCompletePercentage;
            
            private global::System.Data.DataColumn columnCostToCostCompletePercentage;
            
            private global::System.Data.DataColumn columnCurrentProfitMargin;
            
            private global::System.Data.DataColumn columnEstimatedProfitPercentageAtCompletion;
            
            private global::System.Data.DataColumn columnCostPerformanceFactor;
            
            private global::System.Data.DataColumn columnLaborPercentage;
            
            private global::System.Data.DataColumn columnMaterialPercentage;
            
            private global::System.Data.DataColumn columnWIPCostToCompleteLaborHours;
            
            private global::System.Data.DataColumn columnWIPCostToCompleteLabor;
            
            private global::System.Data.DataColumn columnWIPCostToCompleteMaterial;
            
            private global::System.Data.DataColumn columnWIPCostToCompleteRental;
            
            private global::System.Data.DataColumn columnWIPCostToCompleteSubcontract;
            
            private global::System.Data.DataColumn columnWIPCostToCompleteDJC;
            
            private global::System.Data.DataColumn columnWIPCostToComplete;
            
            private global::System.Data.DataColumn columnVarianceLaborHours;
            
            private global::System.Data.DataColumn columnVarianceLabor;
            
            private global::System.Data.DataColumn columnVarianceMaterial;
            
            private global::System.Data.DataColumn columnVarianceRental;
            
            private global::System.Data.DataColumn columnVarianceSubcontract;
            
            private global::System.Data.DataColumn columnVarianceDJC;
            
            private global::System.Data.DataColumn columnVariance;
            
            private global::System.Data.DataColumn columnMaterialPOTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobBalanceDataTable() {
                this.TableName = "tblJobBalance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblJobBalanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblJobBalanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobIDColumn {
                get {
                    return this.columnJobID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalContractColumn {
                get {
                    return this.columnOriginalContract;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedCOColumn {
                get {
                    return this.columnApprovedCO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PendingCOColumn {
                get {
                    return this.columnPendingCO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotApprovedCOColumn {
                get {
                    return this.columnNotApprovedCO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentContractColumn {
                get {
                    return this.columnCurrentContract;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountBilledColumn {
                get {
                    return this.columnAmountBilled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountPaidColumn {
                get {
                    return this.columnAmountPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RetentionColumn {
                get {
                    return this.columnRetention;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CashCostColumn {
                get {
                    return this.columnCashCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BilledCostColumn {
                get {
                    return this.columnBilledCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentBudgetLaborHoursColumn {
                get {
                    return this.columnCurrentBudgetLaborHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentBudgetLaborColumn {
                get {
                    return this.columnCurrentBudgetLabor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentBudgetMaterialColumn {
                get {
                    return this.columnCurrentBudgetMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentBudgetRentalColumn {
                get {
                    return this.columnCurrentBudgetRental;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentBudgetSubcontractColumn {
                get {
                    return this.columnCurrentBudgetSubcontract;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentBudgetDJCColumn {
                get {
                    return this.columnCurrentBudgetDJC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentBudgetColumn {
                get {
                    return this.columnCurrentBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommittedCostToDateLaborHoursColumn {
                get {
                    return this.columnCommittedCostToDateLaborHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommittedCostToDateLaborColumn {
                get {
                    return this.columnCommittedCostToDateLabor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommittedCostToDateMaterialColumn {
                get {
                    return this.columnCommittedCostToDateMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommittedCostToDateRentalColumn {
                get {
                    return this.columnCommittedCostToDateRental;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommittedCostToDateSubcontractColumn {
                get {
                    return this.columnCommittedCostToDateSubcontract;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommittedCostToDateDJCColumn {
                get {
                    return this.columnCommittedCostToDateDJC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommittedCostToDateHoursColumn {
                get {
                    return this.columnCommittedCostToDateHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommittedCostToDateColumn {
                get {
                    return this.columnCommittedCostToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCompleteLaborHoursColumn {
                get {
                    return this.columnCostToCompleteLaborHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCompleteLaborColumn {
                get {
                    return this.columnCostToCompleteLabor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCompleteMaterialColumn {
                get {
                    return this.columnCostToCompleteMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCompleteRentalColumn {
                get {
                    return this.columnCostToCompleteRental;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCompleteSubcontractColumn {
                get {
                    return this.columnCostToCompleteSubcontract;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCompleteDJCColumn {
                get {
                    return this.columnCostToCompleteDJC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCompleteColumn {
                get {
                    return this.columnCostToComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCommitLaborHoursColumn {
                get {
                    return this.columnCostToCommitLaborHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCommitLaborColumn {
                get {
                    return this.columnCostToCommitLabor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCommitMaterialColumn {
                get {
                    return this.columnCostToCommitMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCommitRentalColumn {
                get {
                    return this.columnCostToCommitRental;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCommitSubcontractColumn {
                get {
                    return this.columnCostToCommitSubcontract;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCommitDJCColumn {
                get {
                    return this.columnCostToCommitDJC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCommitColumn {
                get {
                    return this.columnCostToCommit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectedProfitColumn {
                get {
                    return this.columnProjectedProfit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectedProfitPercentageColumn {
                get {
                    return this.columnProjectedProfitPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProfitGainFadeColumn {
                get {
                    return this.columnProfitGainFade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaselineProfitColumn {
                get {
                    return this.columnBaselineProfit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaselineProfitPercentageColumn {
                get {
                    return this.columnBaselineProfitPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobPerformanceFactorColumn {
                get {
                    return this.columnJobPerformanceFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LaborCompletePercentageColumn {
                get {
                    return this.columnLaborCompletePercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BilledCompletePercentageColumn {
                get {
                    return this.columnBilledCompletePercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCostCompletePercentageColumn {
                get {
                    return this.columnCostToCostCompletePercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentProfitMarginColumn {
                get {
                    return this.columnCurrentProfitMargin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstimatedProfitPercentageAtCompletionColumn {
                get {
                    return this.columnEstimatedProfitPercentageAtCompletion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostPerformanceFactorColumn {
                get {
                    return this.columnCostPerformanceFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LaborPercentageColumn {
                get {
                    return this.columnLaborPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialPercentageColumn {
                get {
                    return this.columnMaterialPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WIPCostToCompleteLaborHoursColumn {
                get {
                    return this.columnWIPCostToCompleteLaborHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WIPCostToCompleteLaborColumn {
                get {
                    return this.columnWIPCostToCompleteLabor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WIPCostToCompleteMaterialColumn {
                get {
                    return this.columnWIPCostToCompleteMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WIPCostToCompleteRentalColumn {
                get {
                    return this.columnWIPCostToCompleteRental;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WIPCostToCompleteSubcontractColumn {
                get {
                    return this.columnWIPCostToCompleteSubcontract;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WIPCostToCompleteDJCColumn {
                get {
                    return this.columnWIPCostToCompleteDJC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WIPCostToCompleteColumn {
                get {
                    return this.columnWIPCostToComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VarianceLaborHoursColumn {
                get {
                    return this.columnVarianceLaborHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VarianceLaborColumn {
                get {
                    return this.columnVarianceLabor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VarianceMaterialColumn {
                get {
                    return this.columnVarianceMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VarianceRentalColumn {
                get {
                    return this.columnVarianceRental;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VarianceSubcontractColumn {
                get {
                    return this.columnVarianceSubcontract;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VarianceDJCColumn {
                get {
                    return this.columnVarianceDJC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VarianceColumn {
                get {
                    return this.columnVariance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialPOTotalColumn {
                get {
                    return this.columnMaterialPOTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobBalanceRow this[int index] {
                get {
                    return ((tblJobBalanceRow)(this.Rows[index]));
                }
            }
            
            public event tblJobBalanceRowChangeEventHandler tblJobBalanceRowChanging;
            
            public event tblJobBalanceRowChangeEventHandler tblJobBalanceRowChanged;
            
            public event tblJobBalanceRowChangeEventHandler tblJobBalanceRowDeleting;
            
            public event tblJobBalanceRowChangeEventHandler tblJobBalanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblJobBalanceRow(tblJobBalanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobBalanceRow AddtblJobBalanceRow(
                        int JobID, 
                        decimal OriginalContract, 
                        decimal ApprovedCO, 
                        decimal PendingCO, 
                        decimal NotApprovedCO, 
                        decimal CurrentContract, 
                        decimal AmountBilled, 
                        decimal AmountPaid, 
                        decimal Retention, 
                        decimal CashCost, 
                        decimal BilledCost, 
                        int CurrentBudgetLaborHours, 
                        decimal CurrentBudgetLabor, 
                        decimal CurrentBudgetMaterial, 
                        decimal CurrentBudgetRental, 
                        decimal CurrentBudgetSubcontract, 
                        decimal CurrentBudgetDJC, 
                        decimal CurrentBudget, 
                        int CommittedCostToDateLaborHours, 
                        decimal CommittedCostToDateLabor, 
                        decimal CommittedCostToDateMaterial, 
                        decimal CommittedCostToDateRental, 
                        decimal CommittedCostToDateSubcontract, 
                        decimal CommittedCostToDateDJC, 
                        int CommittedCostToDateHours, 
                        decimal CommittedCostToDate, 
                        int CostToCompleteLaborHours, 
                        decimal CostToCompleteLabor, 
                        decimal CostToCompleteMaterial, 
                        decimal CostToCompleteRental, 
                        decimal CostToCompleteSubcontract, 
                        decimal CostToCompleteDJC, 
                        decimal CostToComplete, 
                        int CostToCommitLaborHours, 
                        decimal CostToCommitLabor, 
                        decimal CostToCommitMaterial, 
                        decimal CostToCommitRental, 
                        decimal CostToCommitSubcontract, 
                        decimal CostToCommitDJC, 
                        decimal CostToCommit, 
                        decimal ProjectedProfit, 
                        double ProjectedProfitPercentage, 
                        double ProfitGainFade, 
                        decimal BaselineProfit, 
                        double BaselineProfitPercentage, 
                        double JobPerformanceFactor, 
                        double LaborCompletePercentage, 
                        double BilledCompletePercentage, 
                        double CostToCostCompletePercentage, 
                        double CurrentProfitMargin, 
                        double EstimatedProfitPercentageAtCompletion, 
                        double CostPerformanceFactor, 
                        double LaborPercentage, 
                        double MaterialPercentage, 
                        int WIPCostToCompleteLaborHours, 
                        decimal WIPCostToCompleteLabor, 
                        decimal WIPCostToCompleteMaterial, 
                        decimal WIPCostToCompleteRental, 
                        decimal WIPCostToCompleteSubcontract, 
                        decimal WIPCostToCompleteDJC, 
                        decimal WIPCostToComplete, 
                        int VarianceLaborHours, 
                        decimal VarianceLabor, 
                        decimal VarianceMaterial, 
                        decimal VarianceRental, 
                        decimal VarianceSubcontract, 
                        decimal VarianceDJC, 
                        decimal Variance, 
                        double MaterialPOTotal) {
                tblJobBalanceRow rowtblJobBalanceRow = ((tblJobBalanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        JobID,
                        OriginalContract,
                        ApprovedCO,
                        PendingCO,
                        NotApprovedCO,
                        CurrentContract,
                        AmountBilled,
                        AmountPaid,
                        Retention,
                        CashCost,
                        BilledCost,
                        CurrentBudgetLaborHours,
                        CurrentBudgetLabor,
                        CurrentBudgetMaterial,
                        CurrentBudgetRental,
                        CurrentBudgetSubcontract,
                        CurrentBudgetDJC,
                        CurrentBudget,
                        CommittedCostToDateLaborHours,
                        CommittedCostToDateLabor,
                        CommittedCostToDateMaterial,
                        CommittedCostToDateRental,
                        CommittedCostToDateSubcontract,
                        CommittedCostToDateDJC,
                        CommittedCostToDateHours,
                        CommittedCostToDate,
                        CostToCompleteLaborHours,
                        CostToCompleteLabor,
                        CostToCompleteMaterial,
                        CostToCompleteRental,
                        CostToCompleteSubcontract,
                        CostToCompleteDJC,
                        CostToComplete,
                        CostToCommitLaborHours,
                        CostToCommitLabor,
                        CostToCommitMaterial,
                        CostToCommitRental,
                        CostToCommitSubcontract,
                        CostToCommitDJC,
                        CostToCommit,
                        ProjectedProfit,
                        ProjectedProfitPercentage,
                        ProfitGainFade,
                        BaselineProfit,
                        BaselineProfitPercentage,
                        JobPerformanceFactor,
                        LaborCompletePercentage,
                        BilledCompletePercentage,
                        CostToCostCompletePercentage,
                        CurrentProfitMargin,
                        EstimatedProfitPercentageAtCompletion,
                        CostPerformanceFactor,
                        LaborPercentage,
                        MaterialPercentage,
                        WIPCostToCompleteLaborHours,
                        WIPCostToCompleteLabor,
                        WIPCostToCompleteMaterial,
                        WIPCostToCompleteRental,
                        WIPCostToCompleteSubcontract,
                        WIPCostToCompleteDJC,
                        WIPCostToComplete,
                        VarianceLaborHours,
                        VarianceLabor,
                        VarianceMaterial,
                        VarianceRental,
                        VarianceSubcontract,
                        VarianceDJC,
                        Variance,
                        MaterialPOTotal};
                rowtblJobBalanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblJobBalanceRow);
                return rowtblJobBalanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblJobBalanceDataTable cln = ((tblJobBalanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblJobBalanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnJobID = base.Columns["JobID"];
                this.columnOriginalContract = base.Columns["OriginalContract"];
                this.columnApprovedCO = base.Columns["ApprovedCO"];
                this.columnPendingCO = base.Columns["PendingCO"];
                this.columnNotApprovedCO = base.Columns["NotApprovedCO"];
                this.columnCurrentContract = base.Columns["CurrentContract"];
                this.columnAmountBilled = base.Columns["AmountBilled"];
                this.columnAmountPaid = base.Columns["AmountPaid"];
                this.columnRetention = base.Columns["Retention"];
                this.columnCashCost = base.Columns["CashCost"];
                this.columnBilledCost = base.Columns["BilledCost"];
                this.columnCurrentBudgetLaborHours = base.Columns["CurrentBudgetLaborHours"];
                this.columnCurrentBudgetLabor = base.Columns["CurrentBudgetLabor"];
                this.columnCurrentBudgetMaterial = base.Columns["CurrentBudgetMaterial"];
                this.columnCurrentBudgetRental = base.Columns["CurrentBudgetRental"];
                this.columnCurrentBudgetSubcontract = base.Columns["CurrentBudgetSubcontract"];
                this.columnCurrentBudgetDJC = base.Columns["CurrentBudgetDJC"];
                this.columnCurrentBudget = base.Columns["CurrentBudget"];
                this.columnCommittedCostToDateLaborHours = base.Columns["CommittedCostToDateLaborHours"];
                this.columnCommittedCostToDateLabor = base.Columns["CommittedCostToDateLabor"];
                this.columnCommittedCostToDateMaterial = base.Columns["CommittedCostToDateMaterial"];
                this.columnCommittedCostToDateRental = base.Columns["CommittedCostToDateRental"];
                this.columnCommittedCostToDateSubcontract = base.Columns["CommittedCostToDateSubcontract"];
                this.columnCommittedCostToDateDJC = base.Columns["CommittedCostToDateDJC"];
                this.columnCommittedCostToDateHours = base.Columns["CommittedCostToDateHours"];
                this.columnCommittedCostToDate = base.Columns["CommittedCostToDate"];
                this.columnCostToCompleteLaborHours = base.Columns["CostToCompleteLaborHours"];
                this.columnCostToCompleteLabor = base.Columns["CostToCompleteLabor"];
                this.columnCostToCompleteMaterial = base.Columns["CostToCompleteMaterial"];
                this.columnCostToCompleteRental = base.Columns["CostToCompleteRental"];
                this.columnCostToCompleteSubcontract = base.Columns["CostToCompleteSubcontract"];
                this.columnCostToCompleteDJC = base.Columns["CostToCompleteDJC"];
                this.columnCostToComplete = base.Columns["CostToComplete"];
                this.columnCostToCommitLaborHours = base.Columns["CostToCommitLaborHours"];
                this.columnCostToCommitLabor = base.Columns["CostToCommitLabor"];
                this.columnCostToCommitMaterial = base.Columns["CostToCommitMaterial"];
                this.columnCostToCommitRental = base.Columns["CostToCommitRental"];
                this.columnCostToCommitSubcontract = base.Columns["CostToCommitSubcontract"];
                this.columnCostToCommitDJC = base.Columns["CostToCommitDJC"];
                this.columnCostToCommit = base.Columns["CostToCommit"];
                this.columnProjectedProfit = base.Columns["ProjectedProfit"];
                this.columnProjectedProfitPercentage = base.Columns["ProjectedProfitPercentage"];
                this.columnProfitGainFade = base.Columns["ProfitGainFade"];
                this.columnBaselineProfit = base.Columns["BaselineProfit"];
                this.columnBaselineProfitPercentage = base.Columns["BaselineProfitPercentage"];
                this.columnJobPerformanceFactor = base.Columns["JobPerformanceFactor"];
                this.columnLaborCompletePercentage = base.Columns["LaborCompletePercentage"];
                this.columnBilledCompletePercentage = base.Columns["BilledCompletePercentage"];
                this.columnCostToCostCompletePercentage = base.Columns["CostToCostCompletePercentage"];
                this.columnCurrentProfitMargin = base.Columns["CurrentProfitMargin"];
                this.columnEstimatedProfitPercentageAtCompletion = base.Columns["EstimatedProfitPercentageAtCompletion"];
                this.columnCostPerformanceFactor = base.Columns["CostPerformanceFactor"];
                this.columnLaborPercentage = base.Columns["LaborPercentage"];
                this.columnMaterialPercentage = base.Columns["MaterialPercentage"];
                this.columnWIPCostToCompleteLaborHours = base.Columns["WIPCostToCompleteLaborHours"];
                this.columnWIPCostToCompleteLabor = base.Columns["WIPCostToCompleteLabor"];
                this.columnWIPCostToCompleteMaterial = base.Columns["WIPCostToCompleteMaterial"];
                this.columnWIPCostToCompleteRental = base.Columns["WIPCostToCompleteRental"];
                this.columnWIPCostToCompleteSubcontract = base.Columns["WIPCostToCompleteSubcontract"];
                this.columnWIPCostToCompleteDJC = base.Columns["WIPCostToCompleteDJC"];
                this.columnWIPCostToComplete = base.Columns["WIPCostToComplete"];
                this.columnVarianceLaborHours = base.Columns["VarianceLaborHours"];
                this.columnVarianceLabor = base.Columns["VarianceLabor"];
                this.columnVarianceMaterial = base.Columns["VarianceMaterial"];
                this.columnVarianceRental = base.Columns["VarianceRental"];
                this.columnVarianceSubcontract = base.Columns["VarianceSubcontract"];
                this.columnVarianceDJC = base.Columns["VarianceDJC"];
                this.columnVariance = base.Columns["Variance"];
                this.columnMaterialPOTotal = base.Columns["MaterialPOTotal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnJobID = new global::System.Data.DataColumn("JobID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobID);
                this.columnOriginalContract = new global::System.Data.DataColumn("OriginalContract", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalContract);
                this.columnApprovedCO = new global::System.Data.DataColumn("ApprovedCO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedCO);
                this.columnPendingCO = new global::System.Data.DataColumn("PendingCO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPendingCO);
                this.columnNotApprovedCO = new global::System.Data.DataColumn("NotApprovedCO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotApprovedCO);
                this.columnCurrentContract = new global::System.Data.DataColumn("CurrentContract", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentContract);
                this.columnAmountBilled = new global::System.Data.DataColumn("AmountBilled", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmountBilled);
                this.columnAmountPaid = new global::System.Data.DataColumn("AmountPaid", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmountPaid);
                this.columnRetention = new global::System.Data.DataColumn("Retention", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetention);
                this.columnCashCost = new global::System.Data.DataColumn("CashCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCashCost);
                this.columnBilledCost = new global::System.Data.DataColumn("BilledCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBilledCost);
                this.columnCurrentBudgetLaborHours = new global::System.Data.DataColumn("CurrentBudgetLaborHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentBudgetLaborHours);
                this.columnCurrentBudgetLabor = new global::System.Data.DataColumn("CurrentBudgetLabor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentBudgetLabor);
                this.columnCurrentBudgetMaterial = new global::System.Data.DataColumn("CurrentBudgetMaterial", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentBudgetMaterial);
                this.columnCurrentBudgetRental = new global::System.Data.DataColumn("CurrentBudgetRental", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentBudgetRental);
                this.columnCurrentBudgetSubcontract = new global::System.Data.DataColumn("CurrentBudgetSubcontract", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentBudgetSubcontract);
                this.columnCurrentBudgetDJC = new global::System.Data.DataColumn("CurrentBudgetDJC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentBudgetDJC);
                this.columnCurrentBudget = new global::System.Data.DataColumn("CurrentBudget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentBudget);
                this.columnCommittedCostToDateLaborHours = new global::System.Data.DataColumn("CommittedCostToDateLaborHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommittedCostToDateLaborHours);
                this.columnCommittedCostToDateLabor = new global::System.Data.DataColumn("CommittedCostToDateLabor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommittedCostToDateLabor);
                this.columnCommittedCostToDateMaterial = new global::System.Data.DataColumn("CommittedCostToDateMaterial", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommittedCostToDateMaterial);
                this.columnCommittedCostToDateRental = new global::System.Data.DataColumn("CommittedCostToDateRental", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommittedCostToDateRental);
                this.columnCommittedCostToDateSubcontract = new global::System.Data.DataColumn("CommittedCostToDateSubcontract", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommittedCostToDateSubcontract);
                this.columnCommittedCostToDateDJC = new global::System.Data.DataColumn("CommittedCostToDateDJC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommittedCostToDateDJC);
                this.columnCommittedCostToDateHours = new global::System.Data.DataColumn("CommittedCostToDateHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommittedCostToDateHours);
                this.columnCommittedCostToDate = new global::System.Data.DataColumn("CommittedCostToDate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommittedCostToDate);
                this.columnCostToCompleteLaborHours = new global::System.Data.DataColumn("CostToCompleteLaborHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCompleteLaborHours);
                this.columnCostToCompleteLabor = new global::System.Data.DataColumn("CostToCompleteLabor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCompleteLabor);
                this.columnCostToCompleteMaterial = new global::System.Data.DataColumn("CostToCompleteMaterial", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCompleteMaterial);
                this.columnCostToCompleteRental = new global::System.Data.DataColumn("CostToCompleteRental", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCompleteRental);
                this.columnCostToCompleteSubcontract = new global::System.Data.DataColumn("CostToCompleteSubcontract", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCompleteSubcontract);
                this.columnCostToCompleteDJC = new global::System.Data.DataColumn("CostToCompleteDJC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCompleteDJC);
                this.columnCostToComplete = new global::System.Data.DataColumn("CostToComplete", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToComplete);
                this.columnCostToCommitLaborHours = new global::System.Data.DataColumn("CostToCommitLaborHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCommitLaborHours);
                this.columnCostToCommitLabor = new global::System.Data.DataColumn("CostToCommitLabor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCommitLabor);
                this.columnCostToCommitMaterial = new global::System.Data.DataColumn("CostToCommitMaterial", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCommitMaterial);
                this.columnCostToCommitRental = new global::System.Data.DataColumn("CostToCommitRental", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCommitRental);
                this.columnCostToCommitSubcontract = new global::System.Data.DataColumn("CostToCommitSubcontract", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCommitSubcontract);
                this.columnCostToCommitDJC = new global::System.Data.DataColumn("CostToCommitDJC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCommitDJC);
                this.columnCostToCommit = new global::System.Data.DataColumn("CostToCommit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCommit);
                this.columnProjectedProfit = new global::System.Data.DataColumn("ProjectedProfit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectedProfit);
                this.columnProjectedProfitPercentage = new global::System.Data.DataColumn("ProjectedProfitPercentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectedProfitPercentage);
                this.columnProfitGainFade = new global::System.Data.DataColumn("ProfitGainFade", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProfitGainFade);
                this.columnBaselineProfit = new global::System.Data.DataColumn("BaselineProfit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaselineProfit);
                this.columnBaselineProfitPercentage = new global::System.Data.DataColumn("BaselineProfitPercentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaselineProfitPercentage);
                this.columnJobPerformanceFactor = new global::System.Data.DataColumn("JobPerformanceFactor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobPerformanceFactor);
                this.columnLaborCompletePercentage = new global::System.Data.DataColumn("LaborCompletePercentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaborCompletePercentage);
                this.columnBilledCompletePercentage = new global::System.Data.DataColumn("BilledCompletePercentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBilledCompletePercentage);
                this.columnCostToCostCompletePercentage = new global::System.Data.DataColumn("CostToCostCompletePercentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToCostCompletePercentage);
                this.columnCurrentProfitMargin = new global::System.Data.DataColumn("CurrentProfitMargin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentProfitMargin);
                this.columnEstimatedProfitPercentageAtCompletion = new global::System.Data.DataColumn("EstimatedProfitPercentageAtCompletion", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstimatedProfitPercentageAtCompletion);
                this.columnCostPerformanceFactor = new global::System.Data.DataColumn("CostPerformanceFactor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostPerformanceFactor);
                this.columnLaborPercentage = new global::System.Data.DataColumn("LaborPercentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaborPercentage);
                this.columnMaterialPercentage = new global::System.Data.DataColumn("MaterialPercentage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialPercentage);
                this.columnWIPCostToCompleteLaborHours = new global::System.Data.DataColumn("WIPCostToCompleteLaborHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWIPCostToCompleteLaborHours);
                this.columnWIPCostToCompleteLabor = new global::System.Data.DataColumn("WIPCostToCompleteLabor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWIPCostToCompleteLabor);
                this.columnWIPCostToCompleteMaterial = new global::System.Data.DataColumn("WIPCostToCompleteMaterial", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWIPCostToCompleteMaterial);
                this.columnWIPCostToCompleteRental = new global::System.Data.DataColumn("WIPCostToCompleteRental", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWIPCostToCompleteRental);
                this.columnWIPCostToCompleteSubcontract = new global::System.Data.DataColumn("WIPCostToCompleteSubcontract", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWIPCostToCompleteSubcontract);
                this.columnWIPCostToCompleteDJC = new global::System.Data.DataColumn("WIPCostToCompleteDJC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWIPCostToCompleteDJC);
                this.columnWIPCostToComplete = new global::System.Data.DataColumn("WIPCostToComplete", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWIPCostToComplete);
                this.columnVarianceLaborHours = new global::System.Data.DataColumn("VarianceLaborHours", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVarianceLaborHours);
                this.columnVarianceLabor = new global::System.Data.DataColumn("VarianceLabor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVarianceLabor);
                this.columnVarianceMaterial = new global::System.Data.DataColumn("VarianceMaterial", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVarianceMaterial);
                this.columnVarianceRental = new global::System.Data.DataColumn("VarianceRental", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVarianceRental);
                this.columnVarianceSubcontract = new global::System.Data.DataColumn("VarianceSubcontract", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVarianceSubcontract);
                this.columnVarianceDJC = new global::System.Data.DataColumn("VarianceDJC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVarianceDJC);
                this.columnVariance = new global::System.Data.DataColumn("Variance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVariance);
                this.columnMaterialPOTotal = new global::System.Data.DataColumn("MaterialPOTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialPOTotal);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobBalanceRow NewtblJobBalanceRow() {
                return ((tblJobBalanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblJobBalanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblJobBalanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblJobBalanceRowChanged != null)) {
                    this.tblJobBalanceRowChanged(this, new tblJobBalanceRowChangeEvent(((tblJobBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblJobBalanceRowChanging != null)) {
                    this.tblJobBalanceRowChanging(this, new tblJobBalanceRowChangeEvent(((tblJobBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblJobBalanceRowDeleted != null)) {
                    this.tblJobBalanceRowDeleted(this, new tblJobBalanceRowChangeEvent(((tblJobBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblJobBalanceRowDeleting != null)) {
                    this.tblJobBalanceRowDeleting(this, new tblJobBalanceRowChangeEvent(((tblJobBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblJobBalanceRow(tblJobBalanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AtefDataSet12 ds = new AtefDataSet12();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblJobBalanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblJobBalanceRow : global::System.Data.DataRow {
            
            private tblJobBalanceDataTable tabletblJobBalance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblJobBalanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblJobBalance = ((tblJobBalanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobID {
                get {
                    try {
                        return ((int)(this[this.tabletblJobBalance.JobIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobID\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.JobIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OriginalContract {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.OriginalContractColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalContract\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.OriginalContractColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ApprovedCO {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.ApprovedCOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedCO\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.ApprovedCOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PendingCO {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.PendingCOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PendingCO\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.PendingCOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NotApprovedCO {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.NotApprovedCOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotApprovedCO\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.NotApprovedCOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentContract {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CurrentContractColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentContract\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CurrentContractColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AmountBilled {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.AmountBilledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AmountBilled\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.AmountBilledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AmountPaid {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.AmountPaidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AmountPaid\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.AmountPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Retention {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.RetentionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Retention\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.RetentionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CashCost {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CashCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CashCost\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CashCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BilledCost {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.BilledCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BilledCost\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.BilledCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CurrentBudgetLaborHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobBalance.CurrentBudgetLaborHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentBudgetLaborHours\' in table \'tblJobBalance\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CurrentBudgetLaborHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentBudgetLabor {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CurrentBudgetLaborColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentBudgetLabor\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CurrentBudgetLaborColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentBudgetMaterial {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CurrentBudgetMaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentBudgetMaterial\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CurrentBudgetMaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentBudgetRental {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CurrentBudgetRentalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentBudgetRental\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CurrentBudgetRentalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentBudgetSubcontract {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CurrentBudgetSubcontractColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentBudgetSubcontract\' in table \'tblJobBalance\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CurrentBudgetSubcontractColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentBudgetDJC {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CurrentBudgetDJCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentBudgetDJC\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CurrentBudgetDJCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrentBudget {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CurrentBudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentBudget\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CurrentBudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CommittedCostToDateLaborHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobBalance.CommittedCostToDateLaborHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommittedCostToDateLaborHours\' in table \'tblJobBalance\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CommittedCostToDateLaborHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommittedCostToDateLabor {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CommittedCostToDateLaborColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommittedCostToDateLabor\' in table \'tblJobBalance\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CommittedCostToDateLaborColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommittedCostToDateMaterial {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CommittedCostToDateMaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommittedCostToDateMaterial\' in table \'tblJobBalance\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CommittedCostToDateMaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommittedCostToDateRental {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CommittedCostToDateRentalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommittedCostToDateRental\' in table \'tblJobBalance\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CommittedCostToDateRentalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommittedCostToDateSubcontract {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CommittedCostToDateSubcontractColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommittedCostToDateSubcontract\' in table \'tblJobBalance\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CommittedCostToDateSubcontractColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommittedCostToDateDJC {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CommittedCostToDateDJCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommittedCostToDateDJC\' in table \'tblJobBalance\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CommittedCostToDateDJCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CommittedCostToDateHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobBalance.CommittedCostToDateHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommittedCostToDateHours\' in table \'tblJobBalance\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CommittedCostToDateHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommittedCostToDate {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CommittedCostToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommittedCostToDate\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CommittedCostToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostToCompleteLaborHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobBalance.CostToCompleteLaborHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCompleteLaborHours\' in table \'tblJobBalance\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCompleteLaborHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToCompleteLabor {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CostToCompleteLaborColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCompleteLabor\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCompleteLaborColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToCompleteMaterial {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CostToCompleteMaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCompleteMaterial\' in table \'tblJobBalance\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCompleteMaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToCompleteRental {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CostToCompleteRentalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCompleteRental\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCompleteRentalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToCompleteSubcontract {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CostToCompleteSubcontractColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCompleteSubcontract\' in table \'tblJobBalance\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCompleteSubcontractColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToCompleteDJC {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CostToCompleteDJCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCompleteDJC\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCompleteDJCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToComplete {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CostToCompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToComplete\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostToCommitLaborHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobBalance.CostToCommitLaborHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCommitLaborHours\' in table \'tblJobBalance\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCommitLaborHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToCommitLabor {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CostToCommitLaborColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCommitLabor\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCommitLaborColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToCommitMaterial {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CostToCommitMaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCommitMaterial\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCommitMaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToCommitRental {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CostToCommitRentalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCommitRental\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCommitRentalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToCommitSubcontract {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CostToCommitSubcontractColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCommitSubcontract\' in table \'tblJobBalance\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCommitSubcontractColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToCommitDJC {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CostToCommitDJCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCommitDJC\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCommitDJCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToCommit {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.CostToCommitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCommit\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCommitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ProjectedProfit {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.ProjectedProfitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectedProfit\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.ProjectedProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProjectedProfitPercentage {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.ProjectedProfitPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectedProfitPercentage\' in table \'tblJobBalance\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.ProjectedProfitPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProfitGainFade {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.ProfitGainFadeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProfitGainFade\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.ProfitGainFadeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaselineProfit {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.BaselineProfitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaselineProfit\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.BaselineProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaselineProfitPercentage {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.BaselineProfitPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaselineProfitPercentage\' in table \'tblJobBalance\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.BaselineProfitPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double JobPerformanceFactor {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.JobPerformanceFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobPerformanceFactor\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.JobPerformanceFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LaborCompletePercentage {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.LaborCompletePercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LaborCompletePercentage\' in table \'tblJobBalance\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.LaborCompletePercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BilledCompletePercentage {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.BilledCompletePercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BilledCompletePercentage\' in table \'tblJobBalance\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.BilledCompletePercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CostToCostCompletePercentage {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.CostToCostCompletePercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToCostCompletePercentage\' in table \'tblJobBalance\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostToCostCompletePercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CurrentProfitMargin {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.CurrentProfitMarginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentProfitMargin\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CurrentProfitMarginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EstimatedProfitPercentageAtCompletion {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.EstimatedProfitPercentageAtCompletionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EstimatedProfitPercentageAtCompletion\' in table \'tblJobBala" +
                                "nce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.EstimatedProfitPercentageAtCompletionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CostPerformanceFactor {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.CostPerformanceFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostPerformanceFactor\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.CostPerformanceFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LaborPercentage {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.LaborPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LaborPercentage\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.LaborPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MaterialPercentage {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.MaterialPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialPercentage\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.MaterialPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WIPCostToCompleteLaborHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobBalance.WIPCostToCompleteLaborHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WIPCostToCompleteLaborHours\' in table \'tblJobBalance\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.WIPCostToCompleteLaborHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WIPCostToCompleteLabor {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.WIPCostToCompleteLaborColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WIPCostToCompleteLabor\' in table \'tblJobBalance\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.WIPCostToCompleteLaborColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WIPCostToCompleteMaterial {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.WIPCostToCompleteMaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WIPCostToCompleteMaterial\' in table \'tblJobBalance\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.WIPCostToCompleteMaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WIPCostToCompleteRental {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.WIPCostToCompleteRentalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WIPCostToCompleteRental\' in table \'tblJobBalance\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.WIPCostToCompleteRentalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WIPCostToCompleteSubcontract {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.WIPCostToCompleteSubcontractColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WIPCostToCompleteSubcontract\' in table \'tblJobBalance\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.WIPCostToCompleteSubcontractColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WIPCostToCompleteDJC {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.WIPCostToCompleteDJCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WIPCostToCompleteDJC\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.WIPCostToCompleteDJCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WIPCostToComplete {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.WIPCostToCompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WIPCostToComplete\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.WIPCostToCompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VarianceLaborHours {
                get {
                    try {
                        return ((int)(this[this.tabletblJobBalance.VarianceLaborHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VarianceLaborHours\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.VarianceLaborHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VarianceLabor {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.VarianceLaborColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VarianceLabor\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.VarianceLaborColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VarianceMaterial {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.VarianceMaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VarianceMaterial\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.VarianceMaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VarianceRental {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.VarianceRentalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VarianceRental\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.VarianceRentalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VarianceSubcontract {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.VarianceSubcontractColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VarianceSubcontract\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.VarianceSubcontractColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VarianceDJC {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.VarianceDJCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VarianceDJC\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.VarianceDJCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Variance {
                get {
                    try {
                        return ((decimal)(this[this.tabletblJobBalance.VarianceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Variance\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.VarianceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MaterialPOTotal {
                get {
                    try {
                        return ((double)(this[this.tabletblJobBalance.MaterialPOTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialPOTotal\' in table \'tblJobBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblJobBalance.MaterialPOTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobIDNull() {
                return this.IsNull(this.tabletblJobBalance.JobIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobIDNull() {
                this[this.tabletblJobBalance.JobIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalContractNull() {
                return this.IsNull(this.tabletblJobBalance.OriginalContractColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalContractNull() {
                this[this.tabletblJobBalance.OriginalContractColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedCONull() {
                return this.IsNull(this.tabletblJobBalance.ApprovedCOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedCONull() {
                this[this.tabletblJobBalance.ApprovedCOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPendingCONull() {
                return this.IsNull(this.tabletblJobBalance.PendingCOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPendingCONull() {
                this[this.tabletblJobBalance.PendingCOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotApprovedCONull() {
                return this.IsNull(this.tabletblJobBalance.NotApprovedCOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotApprovedCONull() {
                this[this.tabletblJobBalance.NotApprovedCOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentContractNull() {
                return this.IsNull(this.tabletblJobBalance.CurrentContractColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentContractNull() {
                this[this.tabletblJobBalance.CurrentContractColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountBilledNull() {
                return this.IsNull(this.tabletblJobBalance.AmountBilledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountBilledNull() {
                this[this.tabletblJobBalance.AmountBilledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountPaidNull() {
                return this.IsNull(this.tabletblJobBalance.AmountPaidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountPaidNull() {
                this[this.tabletblJobBalance.AmountPaidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetentionNull() {
                return this.IsNull(this.tabletblJobBalance.RetentionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetentionNull() {
                this[this.tabletblJobBalance.RetentionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCashCostNull() {
                return this.IsNull(this.tabletblJobBalance.CashCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCashCostNull() {
                this[this.tabletblJobBalance.CashCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBilledCostNull() {
                return this.IsNull(this.tabletblJobBalance.BilledCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBilledCostNull() {
                this[this.tabletblJobBalance.BilledCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentBudgetLaborHoursNull() {
                return this.IsNull(this.tabletblJobBalance.CurrentBudgetLaborHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentBudgetLaborHoursNull() {
                this[this.tabletblJobBalance.CurrentBudgetLaborHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentBudgetLaborNull() {
                return this.IsNull(this.tabletblJobBalance.CurrentBudgetLaborColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentBudgetLaborNull() {
                this[this.tabletblJobBalance.CurrentBudgetLaborColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentBudgetMaterialNull() {
                return this.IsNull(this.tabletblJobBalance.CurrentBudgetMaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentBudgetMaterialNull() {
                this[this.tabletblJobBalance.CurrentBudgetMaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentBudgetRentalNull() {
                return this.IsNull(this.tabletblJobBalance.CurrentBudgetRentalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentBudgetRentalNull() {
                this[this.tabletblJobBalance.CurrentBudgetRentalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentBudgetSubcontractNull() {
                return this.IsNull(this.tabletblJobBalance.CurrentBudgetSubcontractColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentBudgetSubcontractNull() {
                this[this.tabletblJobBalance.CurrentBudgetSubcontractColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentBudgetDJCNull() {
                return this.IsNull(this.tabletblJobBalance.CurrentBudgetDJCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentBudgetDJCNull() {
                this[this.tabletblJobBalance.CurrentBudgetDJCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentBudgetNull() {
                return this.IsNull(this.tabletblJobBalance.CurrentBudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentBudgetNull() {
                this[this.tabletblJobBalance.CurrentBudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommittedCostToDateLaborHoursNull() {
                return this.IsNull(this.tabletblJobBalance.CommittedCostToDateLaborHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommittedCostToDateLaborHoursNull() {
                this[this.tabletblJobBalance.CommittedCostToDateLaborHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommittedCostToDateLaborNull() {
                return this.IsNull(this.tabletblJobBalance.CommittedCostToDateLaborColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommittedCostToDateLaborNull() {
                this[this.tabletblJobBalance.CommittedCostToDateLaborColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommittedCostToDateMaterialNull() {
                return this.IsNull(this.tabletblJobBalance.CommittedCostToDateMaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommittedCostToDateMaterialNull() {
                this[this.tabletblJobBalance.CommittedCostToDateMaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommittedCostToDateRentalNull() {
                return this.IsNull(this.tabletblJobBalance.CommittedCostToDateRentalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommittedCostToDateRentalNull() {
                this[this.tabletblJobBalance.CommittedCostToDateRentalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommittedCostToDateSubcontractNull() {
                return this.IsNull(this.tabletblJobBalance.CommittedCostToDateSubcontractColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommittedCostToDateSubcontractNull() {
                this[this.tabletblJobBalance.CommittedCostToDateSubcontractColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommittedCostToDateDJCNull() {
                return this.IsNull(this.tabletblJobBalance.CommittedCostToDateDJCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommittedCostToDateDJCNull() {
                this[this.tabletblJobBalance.CommittedCostToDateDJCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommittedCostToDateHoursNull() {
                return this.IsNull(this.tabletblJobBalance.CommittedCostToDateHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommittedCostToDateHoursNull() {
                this[this.tabletblJobBalance.CommittedCostToDateHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommittedCostToDateNull() {
                return this.IsNull(this.tabletblJobBalance.CommittedCostToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommittedCostToDateNull() {
                this[this.tabletblJobBalance.CommittedCostToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCompleteLaborHoursNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCompleteLaborHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCompleteLaborHoursNull() {
                this[this.tabletblJobBalance.CostToCompleteLaborHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCompleteLaborNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCompleteLaborColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCompleteLaborNull() {
                this[this.tabletblJobBalance.CostToCompleteLaborColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCompleteMaterialNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCompleteMaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCompleteMaterialNull() {
                this[this.tabletblJobBalance.CostToCompleteMaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCompleteRentalNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCompleteRentalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCompleteRentalNull() {
                this[this.tabletblJobBalance.CostToCompleteRentalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCompleteSubcontractNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCompleteSubcontractColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCompleteSubcontractNull() {
                this[this.tabletblJobBalance.CostToCompleteSubcontractColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCompleteDJCNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCompleteDJCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCompleteDJCNull() {
                this[this.tabletblJobBalance.CostToCompleteDJCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCompleteNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCompleteNull() {
                this[this.tabletblJobBalance.CostToCompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCommitLaborHoursNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCommitLaborHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCommitLaborHoursNull() {
                this[this.tabletblJobBalance.CostToCommitLaborHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCommitLaborNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCommitLaborColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCommitLaborNull() {
                this[this.tabletblJobBalance.CostToCommitLaborColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCommitMaterialNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCommitMaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCommitMaterialNull() {
                this[this.tabletblJobBalance.CostToCommitMaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCommitRentalNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCommitRentalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCommitRentalNull() {
                this[this.tabletblJobBalance.CostToCommitRentalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCommitSubcontractNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCommitSubcontractColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCommitSubcontractNull() {
                this[this.tabletblJobBalance.CostToCommitSubcontractColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCommitDJCNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCommitDJCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCommitDJCNull() {
                this[this.tabletblJobBalance.CostToCommitDJCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCommitNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCommitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCommitNull() {
                this[this.tabletblJobBalance.CostToCommitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectedProfitNull() {
                return this.IsNull(this.tabletblJobBalance.ProjectedProfitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectedProfitNull() {
                this[this.tabletblJobBalance.ProjectedProfitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectedProfitPercentageNull() {
                return this.IsNull(this.tabletblJobBalance.ProjectedProfitPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectedProfitPercentageNull() {
                this[this.tabletblJobBalance.ProjectedProfitPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProfitGainFadeNull() {
                return this.IsNull(this.tabletblJobBalance.ProfitGainFadeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProfitGainFadeNull() {
                this[this.tabletblJobBalance.ProfitGainFadeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaselineProfitNull() {
                return this.IsNull(this.tabletblJobBalance.BaselineProfitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaselineProfitNull() {
                this[this.tabletblJobBalance.BaselineProfitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaselineProfitPercentageNull() {
                return this.IsNull(this.tabletblJobBalance.BaselineProfitPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaselineProfitPercentageNull() {
                this[this.tabletblJobBalance.BaselineProfitPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobPerformanceFactorNull() {
                return this.IsNull(this.tabletblJobBalance.JobPerformanceFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobPerformanceFactorNull() {
                this[this.tabletblJobBalance.JobPerformanceFactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLaborCompletePercentageNull() {
                return this.IsNull(this.tabletblJobBalance.LaborCompletePercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLaborCompletePercentageNull() {
                this[this.tabletblJobBalance.LaborCompletePercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBilledCompletePercentageNull() {
                return this.IsNull(this.tabletblJobBalance.BilledCompletePercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBilledCompletePercentageNull() {
                this[this.tabletblJobBalance.BilledCompletePercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCostCompletePercentageNull() {
                return this.IsNull(this.tabletblJobBalance.CostToCostCompletePercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCostCompletePercentageNull() {
                this[this.tabletblJobBalance.CostToCostCompletePercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentProfitMarginNull() {
                return this.IsNull(this.tabletblJobBalance.CurrentProfitMarginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentProfitMarginNull() {
                this[this.tabletblJobBalance.CurrentProfitMarginColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstimatedProfitPercentageAtCompletionNull() {
                return this.IsNull(this.tabletblJobBalance.EstimatedProfitPercentageAtCompletionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstimatedProfitPercentageAtCompletionNull() {
                this[this.tabletblJobBalance.EstimatedProfitPercentageAtCompletionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostPerformanceFactorNull() {
                return this.IsNull(this.tabletblJobBalance.CostPerformanceFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostPerformanceFactorNull() {
                this[this.tabletblJobBalance.CostPerformanceFactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLaborPercentageNull() {
                return this.IsNull(this.tabletblJobBalance.LaborPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLaborPercentageNull() {
                this[this.tabletblJobBalance.LaborPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialPercentageNull() {
                return this.IsNull(this.tabletblJobBalance.MaterialPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialPercentageNull() {
                this[this.tabletblJobBalance.MaterialPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWIPCostToCompleteLaborHoursNull() {
                return this.IsNull(this.tabletblJobBalance.WIPCostToCompleteLaborHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWIPCostToCompleteLaborHoursNull() {
                this[this.tabletblJobBalance.WIPCostToCompleteLaborHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWIPCostToCompleteLaborNull() {
                return this.IsNull(this.tabletblJobBalance.WIPCostToCompleteLaborColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWIPCostToCompleteLaborNull() {
                this[this.tabletblJobBalance.WIPCostToCompleteLaborColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWIPCostToCompleteMaterialNull() {
                return this.IsNull(this.tabletblJobBalance.WIPCostToCompleteMaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWIPCostToCompleteMaterialNull() {
                this[this.tabletblJobBalance.WIPCostToCompleteMaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWIPCostToCompleteRentalNull() {
                return this.IsNull(this.tabletblJobBalance.WIPCostToCompleteRentalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWIPCostToCompleteRentalNull() {
                this[this.tabletblJobBalance.WIPCostToCompleteRentalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWIPCostToCompleteSubcontractNull() {
                return this.IsNull(this.tabletblJobBalance.WIPCostToCompleteSubcontractColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWIPCostToCompleteSubcontractNull() {
                this[this.tabletblJobBalance.WIPCostToCompleteSubcontractColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWIPCostToCompleteDJCNull() {
                return this.IsNull(this.tabletblJobBalance.WIPCostToCompleteDJCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWIPCostToCompleteDJCNull() {
                this[this.tabletblJobBalance.WIPCostToCompleteDJCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWIPCostToCompleteNull() {
                return this.IsNull(this.tabletblJobBalance.WIPCostToCompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWIPCostToCompleteNull() {
                this[this.tabletblJobBalance.WIPCostToCompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVarianceLaborHoursNull() {
                return this.IsNull(this.tabletblJobBalance.VarianceLaborHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVarianceLaborHoursNull() {
                this[this.tabletblJobBalance.VarianceLaborHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVarianceLaborNull() {
                return this.IsNull(this.tabletblJobBalance.VarianceLaborColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVarianceLaborNull() {
                this[this.tabletblJobBalance.VarianceLaborColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVarianceMaterialNull() {
                return this.IsNull(this.tabletblJobBalance.VarianceMaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVarianceMaterialNull() {
                this[this.tabletblJobBalance.VarianceMaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVarianceRentalNull() {
                return this.IsNull(this.tabletblJobBalance.VarianceRentalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVarianceRentalNull() {
                this[this.tabletblJobBalance.VarianceRentalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVarianceSubcontractNull() {
                return this.IsNull(this.tabletblJobBalance.VarianceSubcontractColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVarianceSubcontractNull() {
                this[this.tabletblJobBalance.VarianceSubcontractColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVarianceDJCNull() {
                return this.IsNull(this.tabletblJobBalance.VarianceDJCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVarianceDJCNull() {
                this[this.tabletblJobBalance.VarianceDJCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVarianceNull() {
                return this.IsNull(this.tabletblJobBalance.VarianceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVarianceNull() {
                this[this.tabletblJobBalance.VarianceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialPOTotalNull() {
                return this.IsNull(this.tabletblJobBalance.MaterialPOTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialPOTotalNull() {
                this[this.tabletblJobBalance.MaterialPOTotalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblJobBalanceRowChangeEvent : global::System.EventArgs {
            
            private tblJobBalanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobBalanceRowChangeEvent(tblJobBalanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblJobBalanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace CCEJobs.AtefDataSet12TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblJobBalanceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblJobBalanceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblJobBalance";
            tableMapping.ColumnMappings.Add("JobID", "JobID");
            tableMapping.ColumnMappings.Add("OriginalContract", "OriginalContract");
            tableMapping.ColumnMappings.Add("ApprovedCO", "ApprovedCO");
            tableMapping.ColumnMappings.Add("PendingCO", "PendingCO");
            tableMapping.ColumnMappings.Add("NotApprovedCO", "NotApprovedCO");
            tableMapping.ColumnMappings.Add("CurrentContract", "CurrentContract");
            tableMapping.ColumnMappings.Add("AmountBilled", "AmountBilled");
            tableMapping.ColumnMappings.Add("AmountPaid", "AmountPaid");
            tableMapping.ColumnMappings.Add("Retention", "Retention");
            tableMapping.ColumnMappings.Add("CashCost", "CashCost");
            tableMapping.ColumnMappings.Add("BilledCost", "BilledCost");
            tableMapping.ColumnMappings.Add("CurrentBudgetLaborHours", "CurrentBudgetLaborHours");
            tableMapping.ColumnMappings.Add("CurrentBudgetLabor", "CurrentBudgetLabor");
            tableMapping.ColumnMappings.Add("CurrentBudgetMaterial", "CurrentBudgetMaterial");
            tableMapping.ColumnMappings.Add("CurrentBudgetRental", "CurrentBudgetRental");
            tableMapping.ColumnMappings.Add("CurrentBudgetSubcontract", "CurrentBudgetSubcontract");
            tableMapping.ColumnMappings.Add("CurrentBudgetDJC", "CurrentBudgetDJC");
            tableMapping.ColumnMappings.Add("CurrentBudget", "CurrentBudget");
            tableMapping.ColumnMappings.Add("CommittedCostToDateLaborHours", "CommittedCostToDateLaborHours");
            tableMapping.ColumnMappings.Add("CommittedCostToDateLabor", "CommittedCostToDateLabor");
            tableMapping.ColumnMappings.Add("CommittedCostToDateMaterial", "CommittedCostToDateMaterial");
            tableMapping.ColumnMappings.Add("CommittedCostToDateRental", "CommittedCostToDateRental");
            tableMapping.ColumnMappings.Add("CommittedCostToDateSubcontract", "CommittedCostToDateSubcontract");
            tableMapping.ColumnMappings.Add("CommittedCostToDateDJC", "CommittedCostToDateDJC");
            tableMapping.ColumnMappings.Add("CommittedCostToDateHours", "CommittedCostToDateHours");
            tableMapping.ColumnMappings.Add("CommittedCostToDate", "CommittedCostToDate");
            tableMapping.ColumnMappings.Add("CostToCompleteLaborHours", "CostToCompleteLaborHours");
            tableMapping.ColumnMappings.Add("CostToCompleteLabor", "CostToCompleteLabor");
            tableMapping.ColumnMappings.Add("CostToCompleteMaterial", "CostToCompleteMaterial");
            tableMapping.ColumnMappings.Add("CostToCompleteRental", "CostToCompleteRental");
            tableMapping.ColumnMappings.Add("CostToCompleteSubcontract", "CostToCompleteSubcontract");
            tableMapping.ColumnMappings.Add("CostToCompleteDJC", "CostToCompleteDJC");
            tableMapping.ColumnMappings.Add("CostToComplete", "CostToComplete");
            tableMapping.ColumnMappings.Add("CostToCommitLaborHours", "CostToCommitLaborHours");
            tableMapping.ColumnMappings.Add("CostToCommitLabor", "CostToCommitLabor");
            tableMapping.ColumnMappings.Add("CostToCommitMaterial", "CostToCommitMaterial");
            tableMapping.ColumnMappings.Add("CostToCommitRental", "CostToCommitRental");
            tableMapping.ColumnMappings.Add("CostToCommitSubcontract", "CostToCommitSubcontract");
            tableMapping.ColumnMappings.Add("CostToCommitDJC", "CostToCommitDJC");
            tableMapping.ColumnMappings.Add("CostToCommit", "CostToCommit");
            tableMapping.ColumnMappings.Add("ProjectedProfit", "ProjectedProfit");
            tableMapping.ColumnMappings.Add("ProjectedProfitPercentage", "ProjectedProfitPercentage");
            tableMapping.ColumnMappings.Add("ProfitGainFade", "ProfitGainFade");
            tableMapping.ColumnMappings.Add("BaselineProfit", "BaselineProfit");
            tableMapping.ColumnMappings.Add("BaselineProfitPercentage", "BaselineProfitPercentage");
            tableMapping.ColumnMappings.Add("JobPerformanceFactor", "JobPerformanceFactor");
            tableMapping.ColumnMappings.Add("LaborCompletePercentage", "LaborCompletePercentage");
            tableMapping.ColumnMappings.Add("BilledCompletePercentage", "BilledCompletePercentage");
            tableMapping.ColumnMappings.Add("CostToCostCompletePercentage", "CostToCostCompletePercentage");
            tableMapping.ColumnMappings.Add("CurrentProfitMargin", "CurrentProfitMargin");
            tableMapping.ColumnMappings.Add("EstimatedProfitPercentageAtCompletion", "EstimatedProfitPercentageAtCompletion");
            tableMapping.ColumnMappings.Add("CostPerformanceFactor", "CostPerformanceFactor");
            tableMapping.ColumnMappings.Add("LaborPercentage", "LaborPercentage");
            tableMapping.ColumnMappings.Add("MaterialPercentage", "MaterialPercentage");
            tableMapping.ColumnMappings.Add("WIPCostToCompleteLaborHours", "WIPCostToCompleteLaborHours");
            tableMapping.ColumnMappings.Add("WIPCostToCompleteLabor", "WIPCostToCompleteLabor");
            tableMapping.ColumnMappings.Add("WIPCostToCompleteMaterial", "WIPCostToCompleteMaterial");
            tableMapping.ColumnMappings.Add("WIPCostToCompleteRental", "WIPCostToCompleteRental");
            tableMapping.ColumnMappings.Add("WIPCostToCompleteSubcontract", "WIPCostToCompleteSubcontract");
            tableMapping.ColumnMappings.Add("WIPCostToCompleteDJC", "WIPCostToCompleteDJC");
            tableMapping.ColumnMappings.Add("WIPCostToComplete", "WIPCostToComplete");
            tableMapping.ColumnMappings.Add("VarianceLaborHours", "VarianceLaborHours");
            tableMapping.ColumnMappings.Add("VarianceLabor", "VarianceLabor");
            tableMapping.ColumnMappings.Add("VarianceMaterial", "VarianceMaterial");
            tableMapping.ColumnMappings.Add("VarianceRental", "VarianceRental");
            tableMapping.ColumnMappings.Add("VarianceSubcontract", "VarianceSubcontract");
            tableMapping.ColumnMappings.Add("VarianceDJC", "VarianceDJC");
            tableMapping.ColumnMappings.Add("Variance", "Variance");
            tableMapping.ColumnMappings.Add("MaterialPOTotal", "MaterialPOTotal");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Atef].[dbo].[tblJobBalance] ([JobID], [OriginalContract], [ApprovedC" +
                "O], [PendingCO], [NotApprovedCO], [CurrentContract], [AmountBilled], [AmountPaid" +
                "], [Retention], [CashCost], [BilledCost], [CurrentBudgetLaborHours], [CurrentBud" +
                "getLabor], [CurrentBudgetMaterial], [CurrentBudgetRental], [CurrentBudgetSubcont" +
                "ract], [CurrentBudgetDJC], [CurrentBudget], [CommittedCostToDateLaborHours], [Co" +
                "mmittedCostToDateLabor], [CommittedCostToDateMaterial], [CommittedCostToDateRent" +
                "al], [CommittedCostToDateSubcontract], [CommittedCostToDateDJC], [CommittedCostT" +
                "oDateHours], [CommittedCostToDate], [CostToCompleteLaborHours], [CostToCompleteL" +
                "abor], [CostToCompleteMaterial], [CostToCompleteRental], [CostToCompleteSubcontr" +
                "act], [CostToCompleteDJC], [CostToComplete], [CostToCommitLaborHours], [CostToCo" +
                "mmitLabor], [CostToCommitMaterial], [CostToCommitRental], [CostToCommitSubcontra" +
                "ct], [CostToCommitDJC], [CostToCommit], [ProjectedProfit], [ProjectedProfitPerce" +
                "ntage], [ProfitGainFade], [BaselineProfit], [BaselineProfitPercentage], [JobPerf" +
                "ormanceFactor], [LaborCompletePercentage], [BilledCompletePercentage], [CostToCo" +
                "stCompletePercentage], [CurrentProfitMargin], [EstimatedProfitPercentageAtComple" +
                "tion], [CostPerformanceFactor], [LaborPercentage], [MaterialPercentage], [WIPCos" +
                "tToCompleteLaborHours], [WIPCostToCompleteLabor], [WIPCostToCompleteMaterial], [" +
                "WIPCostToCompleteRental], [WIPCostToCompleteSubcontract], [WIPCostToCompleteDJC]" +
                ", [WIPCostToComplete], [VarianceLaborHours], [VarianceLabor], [VarianceMaterial]" +
                ", [VarianceRental], [VarianceSubcontract], [VarianceDJC], [Variance], [MaterialP" +
                "OTotal]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " +
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?," +
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("JobID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "JobID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OriginalContract", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "OriginalContract", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ApprovedCO", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "ApprovedCO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PendingCO", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "PendingCO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NotApprovedCO", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "NotApprovedCO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurrentContract", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CurrentContract", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AmountBilled", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "AmountBilled", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AmountPaid", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "AmountPaid", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Retention", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "Retention", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CashCost", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CashCost", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BilledCost", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "BilledCost", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurrentBudgetLaborHours", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurrentBudgetLaborHours", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurrentBudgetLabor", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CurrentBudgetLabor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurrentBudgetMaterial", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CurrentBudgetMaterial", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurrentBudgetRental", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CurrentBudgetRental", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurrentBudgetSubcontract", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CurrentBudgetSubcontract", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurrentBudgetDJC", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CurrentBudgetDJC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurrentBudget", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CurrentBudget", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CommittedCostToDateLaborHours", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CommittedCostToDateLaborHours", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CommittedCostToDateLabor", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CommittedCostToDateLabor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CommittedCostToDateMaterial", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CommittedCostToDateMaterial", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CommittedCostToDateRental", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CommittedCostToDateRental", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CommittedCostToDateSubcontract", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CommittedCostToDateSubcontract", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CommittedCostToDateDJC", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CommittedCostToDateDJC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CommittedCostToDateHours", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CommittedCostToDateHours", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CommittedCostToDate", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CommittedCostToDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCompleteLaborHours", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CostToCompleteLaborHours", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCompleteLabor", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CostToCompleteLabor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCompleteMaterial", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CostToCompleteMaterial", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCompleteRental", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CostToCompleteRental", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCompleteSubcontract", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CostToCompleteSubcontract", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCompleteDJC", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CostToCompleteDJC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToComplete", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CostToComplete", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCommitLaborHours", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CostToCommitLaborHours", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCommitLabor", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CostToCommitLabor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCommitMaterial", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CostToCommitMaterial", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCommitRental", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CostToCommitRental", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCommitSubcontract", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CostToCommitSubcontract", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCommitDJC", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CostToCommitDJC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCommit", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "CostToCommit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ProjectedProfit", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "ProjectedProfit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ProjectedProfitPercentage", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProjectedProfitPercentage", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ProfitGainFade", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProfitGainFade", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaselineProfit", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "BaselineProfit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaselineProfitPercentage", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaselineProfitPercentage", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("JobPerformanceFactor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "JobPerformanceFactor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("LaborCompletePercentage", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LaborCompletePercentage", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BilledCompletePercentage", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BilledCompletePercentage", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostToCostCompletePercentage", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CostToCostCompletePercentage", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurrentProfitMargin", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurrentProfitMargin", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EstimatedProfitPercentageAtCompletion", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EstimatedProfitPercentageAtCompletion", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CostPerformanceFactor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CostPerformanceFactor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("LaborPercentage", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LaborPercentage", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("MaterialPercentage", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaterialPercentage", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("WIPCostToCompleteLaborHours", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "WIPCostToCompleteLaborHours", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("WIPCostToCompleteLabor", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "WIPCostToCompleteLabor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("WIPCostToCompleteMaterial", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "WIPCostToCompleteMaterial", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("WIPCostToCompleteRental", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "WIPCostToCompleteRental", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("WIPCostToCompleteSubcontract", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "WIPCostToCompleteSubcontract", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("WIPCostToCompleteDJC", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "WIPCostToCompleteDJC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("WIPCostToComplete", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "WIPCostToComplete", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("VarianceLaborHours", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "VarianceLaborHours", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("VarianceLabor", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "VarianceLabor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("VarianceMaterial", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "VarianceMaterial", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("VarianceRental", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "VarianceRental", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("VarianceSubcontract", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "VarianceSubcontract", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("VarianceDJC", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "VarianceDJC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Variance", global::System.Data.OleDb.OleDbType.Numeric, 0, global::System.Data.ParameterDirection.Input, ((byte)(18)), ((byte)(0)), "Variance", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("MaterialPOTotal", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaterialPOTotal", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::CCEJobs.Properties.Settings.Default.CostCodeConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT JobID, OriginalContract, ApprovedCO, PendingCO, NotApprovedCO, CurrentContract, AmountBilled, AmountPaid, Retention, CashCost, BilledCost, CurrentBudgetLaborHours, CurrentBudgetLabor, CurrentBudgetMaterial, CurrentBudgetRental, CurrentBudgetSubcontract, CurrentBudgetDJC, CurrentBudget, CommittedCostToDateLaborHours, CommittedCostToDateLabor, CommittedCostToDateMaterial, CommittedCostToDateRental, CommittedCostToDateSubcontract, CommittedCostToDateDJC, CommittedCostToDateHours, CommittedCostToDate, CostToCompleteLaborHours, CostToCompleteLabor, CostToCompleteMaterial, CostToCompleteRental, CostToCompleteSubcontract, CostToCompleteDJC, CostToComplete, CostToCommitLaborHours, CostToCommitLabor, CostToCommitMaterial, CostToCommitRental, CostToCommitSubcontract, CostToCommitDJC, CostToCommit, ProjectedProfit, ProjectedProfitPercentage, ProfitGainFade, BaselineProfit, BaselineProfitPercentage, JobPerformanceFactor, LaborCompletePercentage, BilledCompletePercentage, CostToCostCompletePercentage, CurrentProfitMargin, EstimatedProfitPercentageAtCompletion, CostPerformanceFactor, LaborPercentage, MaterialPercentage, WIPCostToCompleteLaborHours, WIPCostToCompleteLabor, WIPCostToCompleteMaterial, WIPCostToCompleteRental, WIPCostToCompleteSubcontract, WIPCostToCompleteDJC, WIPCostToComplete, VarianceLaborHours, VarianceLabor, VarianceMaterial, VarianceRental, VarianceSubcontract, VarianceDJC, Variance, MaterialPOTotal FROM dbo.tblJobBalance";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AtefDataSet12.tblJobBalanceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AtefDataSet12.tblJobBalanceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AtefDataSet12.tblJobBalanceDataTable dataTable = new AtefDataSet12.tblJobBalanceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AtefDataSet12.tblJobBalanceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(AtefDataSet12 dataSet) {
            return this.Adapter.Update(dataSet, "tblJobBalance");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> JobID, 
                    global::System.Nullable<decimal> OriginalContract, 
                    global::System.Nullable<decimal> ApprovedCO, 
                    global::System.Nullable<decimal> PendingCO, 
                    global::System.Nullable<decimal> NotApprovedCO, 
                    global::System.Nullable<decimal> CurrentContract, 
                    global::System.Nullable<decimal> AmountBilled, 
                    global::System.Nullable<decimal> AmountPaid, 
                    global::System.Nullable<decimal> Retention, 
                    global::System.Nullable<decimal> CashCost, 
                    global::System.Nullable<decimal> BilledCost, 
                    global::System.Nullable<int> CurrentBudgetLaborHours, 
                    global::System.Nullable<decimal> CurrentBudgetLabor, 
                    global::System.Nullable<decimal> CurrentBudgetMaterial, 
                    global::System.Nullable<decimal> CurrentBudgetRental, 
                    global::System.Nullable<decimal> CurrentBudgetSubcontract, 
                    global::System.Nullable<decimal> CurrentBudgetDJC, 
                    global::System.Nullable<decimal> CurrentBudget, 
                    global::System.Nullable<int> CommittedCostToDateLaborHours, 
                    global::System.Nullable<decimal> CommittedCostToDateLabor, 
                    global::System.Nullable<decimal> CommittedCostToDateMaterial, 
                    global::System.Nullable<decimal> CommittedCostToDateRental, 
                    global::System.Nullable<decimal> CommittedCostToDateSubcontract, 
                    global::System.Nullable<decimal> CommittedCostToDateDJC, 
                    global::System.Nullable<int> CommittedCostToDateHours, 
                    global::System.Nullable<decimal> CommittedCostToDate, 
                    global::System.Nullable<int> CostToCompleteLaborHours, 
                    global::System.Nullable<decimal> CostToCompleteLabor, 
                    global::System.Nullable<decimal> CostToCompleteMaterial, 
                    global::System.Nullable<decimal> CostToCompleteRental, 
                    global::System.Nullable<decimal> CostToCompleteSubcontract, 
                    global::System.Nullable<decimal> CostToCompleteDJC, 
                    global::System.Nullable<decimal> CostToComplete, 
                    global::System.Nullable<int> CostToCommitLaborHours, 
                    global::System.Nullable<decimal> CostToCommitLabor, 
                    global::System.Nullable<decimal> CostToCommitMaterial, 
                    global::System.Nullable<decimal> CostToCommitRental, 
                    global::System.Nullable<decimal> CostToCommitSubcontract, 
                    global::System.Nullable<decimal> CostToCommitDJC, 
                    global::System.Nullable<decimal> CostToCommit, 
                    global::System.Nullable<decimal> ProjectedProfit, 
                    global::System.Nullable<double> ProjectedProfitPercentage, 
                    global::System.Nullable<double> ProfitGainFade, 
                    global::System.Nullable<decimal> BaselineProfit, 
                    global::System.Nullable<double> BaselineProfitPercentage, 
                    global::System.Nullable<double> JobPerformanceFactor, 
                    global::System.Nullable<double> LaborCompletePercentage, 
                    global::System.Nullable<double> BilledCompletePercentage, 
                    global::System.Nullable<double> CostToCostCompletePercentage, 
                    global::System.Nullable<double> CurrentProfitMargin, 
                    global::System.Nullable<double> EstimatedProfitPercentageAtCompletion, 
                    global::System.Nullable<double> CostPerformanceFactor, 
                    global::System.Nullable<double> LaborPercentage, 
                    global::System.Nullable<double> MaterialPercentage, 
                    global::System.Nullable<int> WIPCostToCompleteLaborHours, 
                    global::System.Nullable<decimal> WIPCostToCompleteLabor, 
                    global::System.Nullable<decimal> WIPCostToCompleteMaterial, 
                    global::System.Nullable<decimal> WIPCostToCompleteRental, 
                    global::System.Nullable<decimal> WIPCostToCompleteSubcontract, 
                    global::System.Nullable<decimal> WIPCostToCompleteDJC, 
                    global::System.Nullable<decimal> WIPCostToComplete, 
                    global::System.Nullable<int> VarianceLaborHours, 
                    global::System.Nullable<decimal> VarianceLabor, 
                    global::System.Nullable<decimal> VarianceMaterial, 
                    global::System.Nullable<decimal> VarianceRental, 
                    global::System.Nullable<decimal> VarianceSubcontract, 
                    global::System.Nullable<decimal> VarianceDJC, 
                    global::System.Nullable<decimal> Variance, 
                    global::System.Nullable<double> MaterialPOTotal) {
            if ((JobID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(JobID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((OriginalContract.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(OriginalContract.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ApprovedCO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(ApprovedCO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((PendingCO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(PendingCO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((NotApprovedCO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(NotApprovedCO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((CurrentContract.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(CurrentContract.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((AmountBilled.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(AmountBilled.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((AmountPaid.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(AmountPaid.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Retention.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(Retention.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((CashCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(CashCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((BilledCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(BilledCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((CurrentBudgetLaborHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(CurrentBudgetLaborHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((CurrentBudgetLabor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(CurrentBudgetLabor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((CurrentBudgetMaterial.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(CurrentBudgetMaterial.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((CurrentBudgetRental.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(CurrentBudgetRental.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((CurrentBudgetSubcontract.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(CurrentBudgetSubcontract.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((CurrentBudgetDJC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(CurrentBudgetDJC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((CurrentBudget.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(CurrentBudget.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((CommittedCostToDateLaborHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((int)(CommittedCostToDateLaborHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((CommittedCostToDateLabor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(CommittedCostToDateLabor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((CommittedCostToDateMaterial.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((decimal)(CommittedCostToDateMaterial.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((CommittedCostToDateRental.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((decimal)(CommittedCostToDateRental.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((CommittedCostToDateSubcontract.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(CommittedCostToDateSubcontract.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((CommittedCostToDateDJC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((decimal)(CommittedCostToDateDJC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((CommittedCostToDateHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((int)(CommittedCostToDateHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((CommittedCostToDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((decimal)(CommittedCostToDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((CostToCompleteLaborHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((int)(CostToCompleteLaborHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((CostToCompleteLabor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((decimal)(CostToCompleteLabor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((CostToCompleteMaterial.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((decimal)(CostToCompleteMaterial.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((CostToCompleteRental.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((decimal)(CostToCompleteRental.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((CostToCompleteSubcontract.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((decimal)(CostToCompleteSubcontract.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((CostToCompleteDJC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((decimal)(CostToCompleteDJC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((CostToComplete.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((decimal)(CostToComplete.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((CostToCommitLaborHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((int)(CostToCommitLaborHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((CostToCommitLabor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((decimal)(CostToCommitLabor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((CostToCommitMaterial.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((decimal)(CostToCommitMaterial.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((CostToCommitRental.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((decimal)(CostToCommitRental.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((CostToCommitSubcontract.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[37].Value = ((decimal)(CostToCommitSubcontract.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((CostToCommitDJC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((decimal)(CostToCommitDJC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((CostToCommit.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((decimal)(CostToCommit.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((ProjectedProfit.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((decimal)(ProjectedProfit.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((ProjectedProfitPercentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[41].Value = ((double)(ProjectedProfitPercentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((ProfitGainFade.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[42].Value = ((double)(ProfitGainFade.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((BaselineProfit.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[43].Value = ((decimal)(BaselineProfit.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((BaselineProfitPercentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[44].Value = ((double)(BaselineProfitPercentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((JobPerformanceFactor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[45].Value = ((double)(JobPerformanceFactor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((LaborCompletePercentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[46].Value = ((double)(LaborCompletePercentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((BilledCompletePercentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[47].Value = ((double)(BilledCompletePercentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((CostToCostCompletePercentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[48].Value = ((double)(CostToCostCompletePercentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((CurrentProfitMargin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[49].Value = ((double)(CurrentProfitMargin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((EstimatedProfitPercentageAtCompletion.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[50].Value = ((double)(EstimatedProfitPercentageAtCompletion.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((CostPerformanceFactor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[51].Value = ((double)(CostPerformanceFactor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((LaborPercentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[52].Value = ((double)(LaborPercentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((MaterialPercentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[53].Value = ((double)(MaterialPercentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((WIPCostToCompleteLaborHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[54].Value = ((int)(WIPCostToCompleteLaborHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((WIPCostToCompleteLabor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[55].Value = ((decimal)(WIPCostToCompleteLabor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((WIPCostToCompleteMaterial.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[56].Value = ((decimal)(WIPCostToCompleteMaterial.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((WIPCostToCompleteRental.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[57].Value = ((decimal)(WIPCostToCompleteRental.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((WIPCostToCompleteSubcontract.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[58].Value = ((decimal)(WIPCostToCompleteSubcontract.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((WIPCostToCompleteDJC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[59].Value = ((decimal)(WIPCostToCompleteDJC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((WIPCostToComplete.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[60].Value = ((decimal)(WIPCostToComplete.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((VarianceLaborHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[61].Value = ((int)(VarianceLaborHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((VarianceLabor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[62].Value = ((decimal)(VarianceLabor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((VarianceMaterial.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[63].Value = ((decimal)(VarianceMaterial.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((VarianceRental.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[64].Value = ((decimal)(VarianceRental.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((VarianceSubcontract.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[65].Value = ((decimal)(VarianceSubcontract.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((VarianceDJC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[66].Value = ((decimal)(VarianceDJC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Variance.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[67].Value = ((decimal)(Variance.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((MaterialPOTotal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[68].Value = ((double)(MaterialPOTotal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591